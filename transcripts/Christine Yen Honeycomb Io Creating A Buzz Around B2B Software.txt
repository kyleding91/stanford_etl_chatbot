 Who you are defines how you build. This is the OddPearle Thought Leaders Series. Brought to you by Stanford E-Corner. On this episode we have Christine Yan, co-founder of Honeycomb, a tool to assist product development teams understand and debug complex software systems. For the Honeycomb, Christine was an engineer at Parse, which was acquired by Facebook in 2013. So Honeycomb is a tool for helping you understand your complex software systems. What does that mean? What does that look like? Well, right now, if you're a software engineer in the industry, maybe some of you have experienced this in internships, when you're trying to figure out what's happening in production. You typically have two types of tools. You have monitoring tools, which give you graphs, which give you dashboards, where you scroll through lots of things until you find maybe what graph that spikes in an interesting way, and you can kind of look for other graphs that spike in an interesting way. Or you have logging tools, which deal with kind of all the text output from your normal applications. And you go hunting for that needle in a haystack that will tell you what went wrong. Honeycomb's thesis is that these are two things that have sort of evolved in a direction that made sense from the constraints that we had in the 90s. When you had grip, when you had counters, when we were like, all right, well, CPU and memory are very, very expensive. So we're going to do everything very cheaply. It is not 2019. It is terrible to be constrained by the things that people decided 20 years ago, 20 plus years ago. So with Honeycomb, we're saying, you can have both. You can have not only these graphs that we're used to, but also all the fidelity, all the extra metadata, all that useful information in your logs that told you what happened. You can have them together. We use the word events, just describe things that are happening in our system. When we talk about Honeycomb as letting you finally see your production system in high res, meaning you can see the big picture and then zoom in and get really close and understand why and what and how to fix what's going on with your software. To give you a little bit of an idea of why Honeycomb, why now, we're really seeing a few kind of overwhelming trends in the software industry right now. One, technology, the only constant is change, so on and so forth. There's a bunch of technology choices that are becoming popular, that are changing how people are deploying software and maintaining software. Containers, microservices, Kubernetes. All of these pieces of technology mean that the average software system these days has more moving parts. It's harder to keep track of which pieces are interacting with which other pieces and where the problem is coming from. Along with that, while technology is off in the catalyst, we're also seeing changes in the process of engineering teams. Adults have been going on for a while, but things like CI, CD, are changing how people think about how they commit to master, how they push changes to production. And finally, people where we're literally seeing people are now defining themselves as a DevOps team because they're recognizing that the boundary between developer of I'm going to write some code and push the master when I'm done and operator, the people who have to maintain that software once it's in production, they're seeing that line blur and they're looking for ways to bridge those two disciplines or previously thought to be completely different disciplines. And with these changes, people are finding that their tools are currently outdated. So give me an idea of what people are using honeycomb for, what companies have been around for three years. We have a number of customers that have used us to change how they're shipping software. Often people come in first for an instant response use case. They're finding out that when they're experiencing downtime, their current tools aren't giving them answers as to why. They can tell them, they can tell the engineering teams that something is wrong, but they can't figure out the combination of factors that are actually causing an incident, allow them to resolve the incident. It's often what brings folks to us, that's often what gets us in the door, but more and more, we're seeing people use honeycomb not just to figure out why their code in production is not behaving as expected in an incident context, but more like, why isn't it as fast as I expect? Why isn't my code as efficient as I expect? Okay, well let's go look at what it's doing. Let's go look at outliers and why my software might be behaving in a certain way. When we're seeing this cool use case, this cool flywheel of engineering teams folding honeycomb into their development processes, using it to drive decisions about what code right in the first place, what normal is, what use cases, or customer use cases to build for, and really seeing this really cool virtual cycle, virtuous cycle, build in in their development processes in order to ship better code, not just faster like CIICD promises, but also being able to ship with more confidence that your code will do what you expect it to do once it hits production. To give you a very high overview of where honeycomb sits and what it actually does, we ingest a bunch of data, this is logs, agents in your code, whatever, we ingest a bunch of data, we have a custom column store, those are SSDs, that column store lets us slice, dice, analyze, visualize, it gives you insight into your data so that you can start to ask questions about, okay, well why did latency spike, which endpoint did it spike for, which customer did it spike for, is there some strange, is it being impacted by one of my Mongo instances rather than the entire cluster? And this, I have included a video which may or may not work, just what honeycomb looks like, and it seems like it is. Great, ignore the audio, but what this is showing is it's showing us a graph being able to slice and dice by customer ID in this case, as a platform you may have heterogeneous workloads that you care about differentiating between. We believe in tools that you don't just tell you the answer but help point you in the right direction. And what we've done here is the user has said, oh, this artifact is weird, tell me what's special about it. And we've gone through and we've done some statistical analysis to say, hey, that user ID, there's one user that pops out in that highlighted section. And again as your understanding of what's happening in production and why it evolves, you go in, click through, find a trace of a single execution, get down to this level of detail that really helps me understand what my code is doing. And I can continue that cycle. I can take what I've learned here, feed it back into this higher level question of why is my code not behaving the way I expect. This is a recycled deck, our customers love us. So I give you an idea of where, how far we are, what we've been working on. Honeycomb has been in existence since the very beginning of 2016. First year we really spent building out our prototype and establishing the market. And this is something that lots of entrepreneurship classes will tell you not to do. But what we really saw is when we looked at the market, people wanted log tools or they wanted monitoring tools. Because that's what they were used to looking for. We started talking about, hey, observability is this thing that isn't really captured by what your tools currently allow. Observability is about asking new questions of your systems as well as the processes and culture that supports it. 2017-2018 has been taking that prototype, these ideas, this excitement, really starting to land, turn our early adopters into customers, seeing traction, learning lots of lessons about GTM, especially as a developer tool in a B2B market. And right now we're in the stage where we're really trying to feel like we've really grown up kind of out of our awkward teenage phase into our young adult phase. We know what we're doing, we know what our value prop is, we know who we're talking to. And now we just have to show that it's repeatable and go out there and kill it. That's where we are. Thank you for listening to the context and now we can get. Thank you so much, Christine. Thanks for agreeing to do a little bit of interview session with the group. We're going to leave this task again, TRO. Before I kind of get into some of the formal questions, you and I were having a little bit of a chat before you were talking today and I was sharing with you about where I started off on a technical track and ended up moving into a product management check. But you and I actually talked a little bit about that. You were heavy on the technical side. Lots of students that I interact with. One of the top questions that they ask is, do I stand a technical track? Do I go on a product track? Should I do both? When would I do both? But you've had a really interesting perspective on that. I thought that would be a great way to open up. Awesome. To give you an idea, I had a CS degree. I have been a software engineer. I identify as a software engineer and working for about 10 years. For the last, I would say for the last two years, what I've primarily been doing, it's not software engineering. But all that software engineering experience has really helped me understand the problem domain in the folks that we're working with. It lets me go to customers and really understand their problems, understand what their software development practices might be like because I've been a professional software engineer and enough different environments that I can start to understand what is normal and what is not. And it really helps me build up when working with customers and understanding of the right phrases to pull on. If you're doing customer development, you're talking to a customer, they're telling you that their problems, there are certain phrases that I'm much better at being like, oh, tell me more about that. A self person or someone who's less familiar with software might not be able to. Got it. Very cool. So one of the main, the top reason why startups fail is because of lack of product market fit. And that's the most difficult thing to figure out. You think you've identified an unmet need in the marketplace and it turns out, wasn't really a problem in the marketplace or there was other competitors in the space or you saw the need differently. So last time I checked, I think you guys raised over $15 million, your generating revenue. But tell me a little about where this idea came from and how you sort of took it from this initial seed of an idea and got it to a company that's now generating revenue and has done really well in raising some capital. Awesome. Honeycomb started because I was started from myself and my co-founder Charity working together at a company called Parse, which we've got by Facebook. And at Parse, we were dealing with tons of unmitigated chaos. There's a platform that allowed mobile developers to basically include a black box and suddenly get all the benefits of having servers and databases and everything. It meant that it was great for our users. They loved us. We had to deal with our chaos and we had to deal with, oh gosh, the shared resource is being slammed. Who is being slammed by why? Who else is it impacting? How can we put it banded on it so everyone else's service is undamaged? And this question of what's happening? Why? Let's tease it apart and isolate the problems that I talked about in that demo. That's exactly what Charity and I and the other folks in the Parse team were doing day to day. We got bought by Facebook. One of the things that happens when big companies buy little companies is they pat you on the head and they're like, oh, you're so cute. Here are the big kid toys. And with Facebook, most of them were garbage for our use case. Great for Facebook's use cases, not for ours. But one of them stood out. It was called SCUBA. And it let us really quickly slice, dice, understand our system in a way that changed how we built. How we maintained our software, how we built our software moving forward. And I think for us, really the impetus behind this was thinking about going back out there away from Facebook, larger software industry and not having this tool at our fingertips. Because we'd spent, you know, we had our battle scars from trying to solve these sorts of problems with traditional monitoring tools, traditional logging tools. And it was just so painful. We were like, this must exist. Yes. And the thing that we think that becomes easy to discount when a startup idea comes out of that environment is how much easier it is to push adoption inside an organization versus outside. Right. Facebook has a luxury of saying, ah, well, new engineer, here the tools you're going to use, this is why these are the trade-offs and these are the only tools you get to choose from. A little different out here in the real world. But it's been a lot of fun kind of being, it's been a lot of fun being able to start off with that conviction of we know that this is the right problem to solve, that this is the right approach because we've lived it. We ourselves are true believers. Yeah. So tell me a little bit about how the founders came together, how you started thinking about roles and responsibility and that dynamic. Because that's the second reason why starters fail. Wrong people are involved or they're in a wrong position and that's another really hard part to get right. Yeah. So Charity and I had worked together for a few years at Paris before jumping into this together and we actually didn't spend a ton of time working directly. She was the first Infra hire, if I should run it back in software engineering team. I was a product engineer who built our analytics product and most of our interactions early on were like me shipping something and then her being ops coming in and we were knocking on my door and being like Christine, this thing broke, helped me fix it. And so it's funny because that relationship that we had was almost the sort of exact sort of relationship we're trying to break down now with something like honeycomb. But I think that we had a lot of mutual respect for each other, both working on this product that we love, that we cared a lot about and we're especially excited to work with each other on a tool like honeycomb because we both felt like we brought dramatically different perspectives in an important way that would help us make sure that we shipped the right product in the end. Right. Ultimately, honeycomb is a tool for software engineers with operational responsibilities or operational sensibilities. We call them software owners, people who are comfortable in code, comfortable shipping code, but ultimately want to be responsible for how that code continues to behave in production. So we're excited to work with each other for those reasons. We're bringing those kind of different skill sets to the table. We, I think when we started out, we were not, we were not the sort of people to be like, oh, well five years down the road, we're going to be a 200 person company and you should be CEO and obviously to you and we'll have these giant organizations underneath us. We were very pragmatic. We were just like, okay, these are these roles that need filling right now. One of us has to be CEO and none of it really mattered because for this first year we just need to build, build stuff. And so charity kind of reluctantly took on this burden of being CEO and I say burden because that's how she felt. We were engineers going and developing relationships with CEOs and sorry, developing relationships with investors and figuring out how sell are not things that really were exciting to us at the time. We wanted to build a product that would change how people like us would do their jobs. And I think that it was actually perfect in the beginning because charity had spent so much time as an operator kind of developing this public voice. She did a lot of speaking before with her work through Mungo and was very well practiced at going out there in the industry and saying, hey guys, there's General Neutral, guys. There's something like different. There can be, there's something you can be doing your jobs differently. There is this new future. I've seen it. Guys, it's so great over here. Guys, General Neutral. And especially when that first year was spent building up the market, building up the understanding of why observability mattered and why honeycombs approach was important. I think it was great to have her kind of more publicly out there, myself more focused on the product. In the last, this spring, we actually sort of changed roles. So I'm not CEO, she is CTO. Wow. And I think that it feels on one hand feels like a big change, right? Oh, changing roles. What does that mean? What does that mean for our focus is to change? On the other hand, as a startup goes from a baby startup to a three year old startup, the needs of each role also changes. The type of person that you need to be to get something off the ground, that's sort of a CEO that you need to be to get the industry and get folks excited about this new vision, can be a very different person than that CEO who needs to get to that repeatable sales model. And so I think because we started off with this very strong, basic trust between the two of us and understanding of each other's strengths and skills, we have been able to both do what is best for the company. Yeah. So just following to that, I'm really fascinated with that dynamic and how did conflict resolution and disagreements? So that just sort of happened naturally. Did that take some work? And the other part to that question is, and I've talked a lot about Generation Z and Millennials, how incredibly self-awarely are. But that's an incredibly rare insight to have the kind of self-awareness to focus on what the needs of the company are and be able to literally adapt and take on a different role. And did that level of self-awareness come from? And just a dynamic of how the magic of getting this chemistry, right? Charity is pretty exceptional. And she had been a manager for many years at Parsons before. And so I all had it for that self-awareness. I think really goes to her. Yeah, very cool. That's awesome. Okay. Third reason why startups fail, they run our money and can't raise money. So of the universe of early stage companies in the world, the last stat that I looked at, maybe 10%, if they're lucky, get a meeting with an institutional investor. And then of that, maybe 10% of that actually gets a term sheet and gets funded. So raising money at the level that you guys have done, so walk me through a little bit how you overcome that challenge. My guess was people weren't lining up trying to throw money at you guys and how you were able to get the company capitalized to do all the great things you're doing. And this is another point in favor of working at an existing company for a while before jumping into a startup. Because Charity and I had done our time, worked with a number of different companies, because Charity had for the last two years that she'd spent at Parsons really invested in going doing the conference circuit and talking about Mongo and becoming sort of a domain expert in Mongo reliability engineering. And she was sort of more of a known quantity. And especially when early stage startups also involve bringing customers and getting folks to pay attention to you, that was very much a point in our favor when we were raising our first seed round. And I actually remember one of my first conversations with one of our early investors, he was sort of a casual acquaintance. And I was like, hey, wanted to catch up. How's it going? And he was like, oh, I'm so glad you reached out. I heard Charity majors left Facebook. Do you know what she's doing next? And I was able to sit back and kind of crack up because I was like, oh, well, I'm glad you asked. We're working together on a startup. I hear you have money. I think since then, it only gets harder once they expect you to have more results to show a huge step of the way. Steve funding, I think, is a really important institution. But they're at that point, they're betting on you. They're betting on your potential. They're betting on your idea and how excited they are about the market. And a lot of these difficult to quantify things. And one thing that is certainly true and that we have been able to experience ourselves is, okay, well, two rounds down the road, what do you have to show for it? And it's a very different conversation. Awesome. Cool. One of them are more challenging. So getting the product right, figuring out product market fits super challenging, getting the right people on board in the right position is really hard and getting the company capitalized. The other part that also is incredibly difficult to figure out is you go to market strategy. So I'm wondering who your customers are, how the market segments, and how you've been able to reach your market, how you figured all of that out. And we're able to start establishing value and generating revenue. This has been an incredible learning experience for us. So again, a couple of engineers who knew that it's not as simple as, you know, if you build that they will come. And certainly at parts, we're coming out of this being like, okay, well, we need to charge money first or else we will have to sell to Facebook because we have no, we don't have enough revenue coming in. Not a bad way to go. I think it has been fascinating. So we started off thinking, well, of course we're going to, we've always priced per based on storage. A lot of other customers in the space will do things like price based on seat, price based on host, how many hosts you're currently monitoring. And for various reasons, we felt like those were how, they're a pricing model put in place by business people, not by engineers. And be sort of a relic of how, again, systems work in the past and how reflection of how infrastructure looked in the past. So we've always priced based on storage and we sort of started out with this thesis that people who have sufficiently complex infrastructures will need, have the budget and will have the need to pay for something, a tool that really helps them understand it. And I think there has been a little bit of, because of the lack of a really strong business voice early on, we did a lot of exploration and we had a lot of early success with folks who had been around the block, tried a bunch of tools and got it who were like, hey, hear you, you're saying like, honeycomb is taking the right approach, I believe in this. I'm going to place it on you almost, almost like investors do with CEDS' companies. And I think the thing that we discounted in trying to repeat that is the role of navigating an organizational structure, finding your way to that buyer from a practitioner who might absolutely get it but has no coal in their organization. And so I would say that in 2018, especially the end of 2018, we've gotten a lot better at first finding kind of a pressure release valve for those practitioners who are very excited but are never going to be able to justify a large deal. So okay, we've released a self-served tier. You can self-select into this, you don't have to talk to a salesperson, you can just get up and going on your way. At some time, we've gotten a lot better at understanding first, identifying who our buyer is, what our entry point is, who to talk to. And second, not framing the value of honeycomb in terms of our technical capabilities, but what it will enable their engineering team to do. Right? Very natural, for engineers. Hey, remember how you want to try to do this thing and you couldn't, and you're on call and your life sucks, we have the solution. That worked really well for the person who's actually being woken up, not so much for the CTR VP of engineering who's like, on call, I remember when I was on call, ex years ago. And so it has been an education and a revelation in figuring out how to speak to that person, as well as how to assemble the right team of folks to help us and speak to that person. Because charity in my brains are wired precisely the wrong way constantly. So it's the unwiring, constant unwiring that we have to do, speaking the buyers. I think it's a lot of discipline. That's fantastic. So as I look out into the audience, I see future entrepreneurs like yourself. What lessons would you share with them about your journey? What if you really learn that top three things that you think would be important for a future entrepreneur? I'm going to give lessons to my past selves who probably would not have characterized yourself as a future entrepreneur. So I'm assuming all of you, the fact that you're here, you're all already past this point. I'm going to say this lessons anyway because I can. As a technical person, it was very easy for me to be like, oh, well, marketing, soft skills, sales, sales skills. I can figure those out. And man, I wish I could go find my 18 year old self and smack myself upside the head and make myself go sit in a marketing class just to understand how, what playing pieces you have there, what levers you have, what people in a different role care about and how that boundaries should work, right? Because yes, I'm technical. That's a great advantage to have. But if you don't know what you are missing in these other roles, not only can you probably not do it yourself well right away, it also becomes much harder to find someone who can. And building the right team, hiring, we've had a couple of kind of hiring mistakes along the way because we didn't know what good looked like and what we're missing. Another lesson, I think, I am, so you mentioned the company I started when I was 23 in 2011. When I was 23, that startup was only ever myself in my co-founder. My daily, I worked six days a week from around 11 a.m. until 4 a.m. every night. And I know it was 4 a.m. because that's when the last bus left from market back down to lower hate where I lived. Suddenly, Saturday nights, I would end around like one or two and I'd do a shot and go meet up with my friends at a bar. There is a level of sustainability. Again, I'm hoping this is not news to any of you. But there are things that you can do. It doesn't mean that you should. And probably means that you're not going to be your best self when you do them. Two of our first employees at Honeycomb were dads of toddlers. So they had to go home at five to put their kids to bed. Yeah, working with four in the morning. You know, sometimes they would come back online and work on their own schedule. But I think with Honeycomb, we were able to set the expectation from the beginning. We are hiring you and in hiring you, we are extending the trust that you are going to do your work sustainably and kind of police yourself. You are going to not bring yourself out. You're going to be responsible and do all the things that you should be doing. But I don't want to be having to tell you to go home at 2 a.m. because it's been the fourth night in a row that you've been at work. And I think charity, honestly, it's easy for us to say and charity in myself, again, probably have the most irregular, terrible schedules of everyone in the company. But being able to set that expectation up front, that we do not expect it of the company, I think has allowed us to hire a type of person that lots of companies looking for ninjas and rock stars, love to hire, but can't. And I think the third thing, actually, then for future entrepreneurs is don't undervalue the culture of a company when starting. Lots of other startup founders will say their biggest problem is hiring. With Honeycomb, Grena, we're pretty lean right now. But I'm lucky. We're lucky enough to say that with the exception of good marketing people who can set hook and market technical products. And I believe the hardest role to hire for in the industry. We have been lucky enough to not really have had a problem with hiring because people come to us because they know that we respect our engineers, respect our employees. There is an attitude of humility towards these other disciplines. You're not going to, you know, a salesperson isn't going to join Honeycomb and be, like, looks down on because we've gone through and learned all these lessons and been made humble by the rest of the industry. And that they're, you know, frankly, I think our engineering team, I think our entire company is like half women. And that the sorts of things that you established very early on when it's two founders or two founders and two employees and that, and plus one problem, it established the right culture early in saying that you care about the things that you care about early, really sets a tone for hiring far, far down the road, farther than you can see. That's awesome, fantastic. So one of the, in doing some research and looking into your background, talking a little bit last night, just in this conversation here today, you strike me as a polymath person. Someone who is incredibly gifted, obviously incredibly bright, but can grasp and gain a lot of knowledge and a lot of different disciplines. And that's, that's pretty rare. I worked with Elon Musk. He was able to do that. But one of the things that I think is a testament to this ability, and I'm wondering if you could tell the audience a little bit about, you know, most folks can either be fantastic at B2B or super fantastic at B2C. Like these are entirely different markets and entirely different needs. The fact that you've been successful in both of those areas, tell me a little bit about what you learned through that and how that skill came about and how you, you know, have this ability to be so successful in B2B and then also so successful in B2C. I would not say that, I would not characterize myself as successful in B2C. Frankly, I think B2C is sort of a consumer's, consumers are fickle and magical and when it gets B2C is they see the future in a way that I don't. I think what draws me to B2B, frankly, is the conviction that I understand the problem. And that's the power in being a developer, building developer tools. I can immediately empathize. I can smell the, I don't know if I can swear. I can smell the pitfalls that we might fall into a little bit better. And I think what I enjoy and certainly again, my personality rather than I think is with B2B, we have a little bit more of the time and luxury to really understand our customers, to really understand and account, understand what's special about their engineering team, about their practices, about the problems that face them, the problems that are unique to their business. That's a lot of fun for me and really informs our product, informs how we think about reaching the next end customers like them. And I think helps them feel like Honeycomb is one of their partners rather than just a vendor or some tool that they use. Okay, cool. What's critical, obviously, is recruiting a hiring, really great talent. You're on the good as your talent. And tell me a little bit about what do you value more pure, raw engineering talent or domain expertise and how does your recruiting process work and how you reconcile those to those two items? That's a great question. I honestly would probably say neither one is the most important for us when hiring. Engineering talent is important, but not the most important thing. I think we actually have some posts on our blog about our hiring process. We would much rather understand how someone thinks. And constructing technical interviews is a topic that I'm sure, if you wanted to, you get a panel up here and take like three hours discussing the merits of. But there are so many dimensions of building software, shipping software as part of a team that whiteboard interviews simply don't capture. I will call it, strike as another example of a really great company that does their engineering interviews in a slightly different way where they accept that. And we accept that software engineering is about reading code, probably more than about writing code. It's about pairing with someone to talk through a problem. It's about understanding the architecture of the problem. And especially for us, for a product engineer, we want them to be thinking about what the experience is for the user. We're a small startup. Right now we're still at a stage where we are able to embrace people who aren't just giving me spec and I'll execute on it. We love people who can be given a technical problem, but make those trade-offs and make those decisions based on what they think the best user experience is. So domain expertise is something that can be learned. Again, as a developer tool, we have the additional leg up of lots of people come in naturally with domain expertise because they've had to deal with production incidents on the job. And raw engineering talent is something that engineering ladders can address and ideally is already happening on the job. But there's an element of curiosity and openness and acceptance that you have different skills that I do. We can work together and pair and build something awesome. That is, I think, what gets us much more excited about an engineering candidate. Very cool. Tell me a little bit about your culture, how you guys built it. Did it happen organically? Was it purposeful? What shaped it? How did you describe it? I would say it is fairly purposeful. So again, charity myself worked at parts. One of the things I think became very clear to us was that parts was very special to us because everyone who joined cared deeply about the problem domain and the way that we were addressing it. And there was a part when parts, when parts were 20 people and everyone had built an app on parts, even the office manager. It was cool. And that was something that was really special and was something that had, effortlessly, come out of those founders. So when charity and I started Honeycomb, we were very aware of how the things that we did, things that we signaled were important to us, would shape the culture moving forward, and how easy it is to let something spin away if you're not being attached to it. So again, we started off being very conscious of visibly and vocally rewarding the behaviors that we wanted to support, while, for example, working late, right? Charity and I worked late all the time. But if one of our engineers who we knew how to kid was working late, we'd be like, hey, you need to get home? There's no thanks for working late. I thought you tried really hard. There's no thanks for working at 11 PM on the day before Thanksgiving. None of that. It was very, we were very conscious of those signals that we would send, because even though we knew those first two hires really well, well, that next hire might pick up those cues and learn that, well, I'm expected to be here at 11 PM. The April's the Thanksgiving too. We think that's terrible. And I think that that extended to, again, work life balance that extends to how we want engineers to work with each other in a very collaborative style rather than a, like, leave me alone style. And I think that it's a, we are constantly looking and seeing and cross correcting. And we've been very lucky to hire some managers who are similarly very conscious and invested in facilitating a culture of learning and curiosity to support the wrong engineering talent that all of our engineers have. That's awesome. All right. We've got one final question. Then we'll open up for some Q&A and I'm going to steal Tina Sealeg's, my favorite question. Go back in time. You're having a conversation with your 20 year old self. What advice did you give that person? Get more and have more fun. I, you know, I worked really hard in college. I don't regret it. I'm sure I learned a lot. But like, you know, if I, if my GPA was like a couple points, you know, hence lower, would I have had some more fun? Probably. Would have made a difference to where I am today, probably not. I think that in, in life, in work, it's constantly a game of prioritization, right? If I, if I have these 10 to do items, which one is the one that I can do that I'll have the most impacts that I can go to sleep and not feel bad about the other nine, that's something that I wish I'd perfected when I was in school to so that I could maximize for learning. I could maximize for, I mean, the biggest thing for my buck for things that would make my grades still be good. But I look back and I'm like, you know, people talk about, you know, I'm like, you know, people talk about things like thirsty Thursday and I'm like, oh, I always had a lab or a giant piece set or something, do Friday mornings. And I had a very boring Thursday night. Always. Man. That's awesome. Fantastic. Well, look, I can tell you just from the short time that we spent together, unless you've been snoozing through the same, your energy, your positive attitude, it's so infectious, I literally have to have such a technical product like I go work for you. You made it so interesting and so cool. And I hope all of you felt that way as well. So a little bit of time. Let's take some questions and we'll let Christine answer those for you. You mentioned earlier that you were getting better at finding pressure relief valve for the customer. Did you have an epiphany when you were pitching customers the product early on and find a better way to market or sell it? The question is, did we have an epiphany that led to the pressure relief valve for our customers? I think when I say, when I just have a pressure relief valve, I really, I'm not going to really think of it as a pressure relief valve for our sales process. And for this building, this GTI mentioned, GTI motion, we were finding and I would not describe it as an epiphany. I would describe it as many, many protracted, emotionally heightened conversations in which in trying to figure out where to spend our time. We basically saw that there was a ton of interest in Honeycomb, but lots of it was from, you know, very vocal, very engaged to person startups. And as much as we would have liked to build our business on two person startups, frankly, developers of two person startups tend to like to not spend money on developer tools. And so we basically had to find a way to let them use Honeycomb so that they could eventually, you know, eventually turns into like marketing. We think of it as a marketing expense, supporting folks who want to use this free or for a very small amount of storage, but who might be happy, might say good things about us to their friends, work at bigger companies, might turn into bigger deals. And that was much more of how do we free up our sales people from not even have to think about these two person startups and to enable the two person startups to not have to talk to a sales person, which many engineers are still like, oh, God, sales. It was, again, maybe something that would have been obvious to this person, someone who more conversant in sales, but something that we landed on and really embraced only after some time of struggle. Yeah. Yeah. So, when was the moment, I think, with you decided to move out of like Benutastic and like get into other things? I'm just curious about what are some of the learning experiences you had from there and into what you're doing today. Yeah. With Benutastic, I think that, and this is another lesson for you, my co-founder at the time, I don't think that she really understood what she was getting into by committing to start a startup with me. I think that she thought of it as something that would be a fun way to spend like six months. She ended up matriculating at grad school while, like, after we'd gotten some angel investment. And I was like, I was not confident in myself enough to be like, no, you're not allowed to. You made this commitment to me, we're going to do this. And that's an example where I think if I could go back, I would have played, that would have played out very differently because ultimately, she matriculated at grad school about seven or eight months into that experience. And eight or nine months into that experience, we tried to make it work. And instead of, well, I ultimately walked away because I was just like, you're not taking this seriously. We're struggling to find, to make this work. We can't find some new idea that we're both excited about. And I emotionally and physically burned out. I want to go just work with some of my friends and contract for a while. And that was a lesson for me in the emotional investment that all of these endeavors take. And my rebound there was contracting with some friends with whom I cared about those friends, but I didn't really care about the startup. And it was nice to be able to just go and be an engineer and not have to feel emotionally tied up in that. And sort of, I needed to bounce back to that after the disappointment of having to walk away. Yeah. Where are some tactics to use for efficient and effective collaboration? Fission and effective collaboration. I think it is, I feel like I want to list out a bunch of tools that we use, but really the key to, I feel like the key to that is having the culture and the expectation that that's how we're going to interact, not any one tool. If you pull, I'm going back and imagining some of my less collaborative co-workers in the past. I pulled out a set of tools. I mean, we're going to do this. I wouldn't have helped. It's all about the, I think, more like the ability to not take things personally when someone asks why and us both entering the conversation with an open and curious mindset rather than the set of tools, which is a non-answer. I apologize. The entrepreneurial thought leader series is a Stanford e-corner, original production, supported by the venture capital firm DFJ. The stories and lessons on Stanford e-corner are designed to help you find the courage and clarity to see and seize opportunities. Stanford e-corner is led by the Stanford Technology Ventures program and Stanford's Department of Management Science and Engineering. To learn more, please visit us at ecorner.stanford.edu.