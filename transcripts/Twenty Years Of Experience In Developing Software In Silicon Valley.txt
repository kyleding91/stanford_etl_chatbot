 We have Kim Palaisé, who is here from the CEO of Spike Source. She has a wonderfully interesting background. She has a degree in biophysics from UC Berkeley. She also studied computer science. And one of her wonderful claims to fame is that when she was at Sun, she was the original product manager for Java. She then went on to fan Marimba and is currently the CEO of Spike Source. So without further ado, Kim Palaisé. Thank you, Tina. Delighted to be here this afternoon. And I'm just going to talk from some notes I have and just basically sort of stream of consciousness. And then allow plenty of time for Q&A. So what I'd really like to focus on is, you know, based on the 20 years I've been in the valley, I just actually counted it up the other day. It's going to be 20 years in December, which is a frightening statistic. But I think about it, but actually it's amazing how much has changed during that time too. It's many, many different waves of innovation. Many lessons learned. And some observations on what's changed about building a company in the sort of Web 2.0 era for lack of a better descriptor. And what hasn't changed? So just remarking on some of my own experiences and observations along the way. So let me talk a little about kind of my background. I was raised in the Bay Area. I grew up in Berkeley. I was actually a girl geek. I was entering science fairs all the time when I was a kid. I just loved cool stuff and gravitated towards it. And I was fortunate enough to live in Berkeley to be able to go up to the Lawrence Hall of Science regularly. That's where I spent many, many hours as a kid playing on the computers. And actually they had a program back then called Eliza, which as it turned out, this was in the 70s. That's what I was a kid, frightening as that is. Probably many of you weren't even born then. But back in the 70s, there was a computer program called Eliza, which many of you probably are familiar with. If you studied AI, taken a class on AI, that was one of the first seminal artificial intelligence programs. And Eliza was running on the computers at the Lawrence Hall of Science and was kind of an online psychologist, psychiatrist. And I love to have conversations with Eliza, who would ask annoying questions and basically trick her into the computer, into acting like a computer, going into an infinite loop, and puzzling out how it was that you were able to create a software program that could actually reason like a human being, but only to a certain point, and then pondering the limitations of that. That was really my first exposure to computers. And so it was a very positive experience. It wasn't scary or daunting in any way. It was intriguing. It raised my curiosity. And really, it was, I think, the driver for me pursuing later on in my studies, computer science as a focus. So I got a degree actually in biophysics, as Tina mentioned, from UC Berkeley in 84. I had an interest in a variety of different sciences, physical, biological, computer science. And so I hadn't really quite found my focus. But about the time I became a software, I actually took my first computer science class at Cal and it had a great teacher. And it was that experience that really made me start to focus more and more on computer science as I went. And then I actually started teaching computer programming up at the Lawrence Hall of Science to kids and adults at that time. So it was kind of nice to go back and be able to be a teacher myself and work with the kids. I graduated in biophysics. But by then I decided computer science was really where I wanted to focus. I went up to the University of Washington and took a few classes for basically took the equivalent of a bachelor's degree in computer science over the course of a year, the basic coursework. And then came down to the valley in 1985 and got my first job at a company called IntelliCorp. And IntelliCorp was one of the first AI companies. This is when AI was really hot. In fact it was founded by Stanford professor Edward Fiegenbaum. And IntelliCorp's products were expert systems, expert system building tools actually. Helping companies create expert systems that would help automate processes internally within their organization or help them deliver new kinds of applications to their customers. It was very experimental at that time, but there was enough meat to it that companies were actually experimenting beginning to buy these systems and build some prototype expert systems with the software. But I learned a lot during that experience too. I learned how easy it is to be early in a market. And when you see the potential, when it's clear that there's a need in the marketplace, when you've got the technology and you've got a lot of smart people. But the hard part is making sure all the infrastructure is ready for that company or that idea. And the problem with AI back in the mid 80s was the infrastructure, basically expensive machines, expensive computers, upwards of $30,000 and more, symbolic machines, Xerox machines. Just weren't cheap enough to really propel this market forward. And the software is also very expensive and pretty complicated to use. So while there were a lot of prototype systems that were developed using AI, it didn't really become mainstream until really just the last decade or so. Now AI is everywhere. Nobody really calls it AI. We see it in logistics systems. We see it in fuzzy logic in washing machines, determining temperature and so forth. It's everywhere. But we just don't think of it as much as we did before as sort of a unique industry sector. So first lesson learned was oftentimes you can be certain about the potential of a technology, but it takes a long time from the market to ultimately catch up because there are other pieces that need to be in place. But I met a lot of very smart people at IntelliCorp. It was actually one of those companies that ends up having an alumnus that our alumni organization in essence of people that go on and do very interesting things later, for example, one of our team members went on and was part of the Newton team. Ultimately started her own software company, which she sold a mercury and many other examples too. So from there, I actually left IntelliCorp in 1989 and joined Sun Microsystem. Sun was starting to experiment and move into the area of AI and really developed a software business. It had been a hardware company historically, but was building a software, a significant software business and AI was an important component of that. So I came on board in support and that's what I was doing, by the way, at IntelliCorp. I was in technical support, which was a great place to be because I had responsibility for understanding how to apply the technology and I could really see how it was being used and the challenges in using it in the real world. At Sun, I moved from support into product management and became the product manager for C++, a transition from the AI to software development tools. And actually Eric Schmidt was heading up this organization. Eric is now the CEO of Google. So a lot of people in the valley here were part of that software unit at the time. John Fiber, who was also part of that business unit at Sun, went on to Mordavidao and many others. The product manager job turned out to be a great role because it was kind of like being a CEO, but you were responsible for the product, not for a company. But you had a wide variety of responsibilities, everything from helping engineering define the features and functions of the software itself, to the marketing of it, the branding, the positioning, the messaging, the licensing, to business development relationships, partnerships in the industry. And that's where I really started to see what it takes to take a technology from just the raw bits to actually a marketable successful product and all the moving parts involved in that. Sun was a great proving ground for that. Sun is a great company and had very, very smart people in it. It was also an environment where it was synch or swim. So I didn't have any formal training in this. I didn't have a business degree. I was a little worried about moving from the more the technology side to the marketing side, but realized that intersection of marrying the technology to a business need was probably about the most interesting place to be. So I got over that pretty fast. And I had to learn. So I came up the curve really by example by seeing what other people were doing. And by starting to form kind of a network of smart people that I could ask questions of and that became a repeated pattern throughout my subsequent years. Along the line along the way at Sun, I found out about a secret project back in 1993. And I was now the product manager of an object object oriented building tool. And I found out about a project inside of Sun called Oak. And Oak was a spin off project. It was actually a stealth project that Scott McNeil and Bill Joy and a few of the core executive team at Sun had had funded to take a technology that was designed for a future networked world and allow those engineers to run with it and see what they could build. And they had built a prototype that showed what this technology was capable of. It was a language runtime that was revolutionary. And I came from the world of C++. So I knew the difference between C++ and traditional programming languages and this. And Oak was based on actually C++, Objective C's, Small Talk, and many existing programming languages. But it added a lot of new capabilities, security, the ability to scale potentially to millions of endpoints, size was very compact. A lot of capabilities that made it a much better programming language for what these engineers were envisioning. James Gosling and a team of brilliant engineers were envisioning this future networked world. Nobody knew how that would come about. But they had built a language and a language runtime to basically deliver services in the future that could meet the needs. When I found out about the project, I also found out they needed a product manager, which was great. And I was looking for a new challenge. So I joined the team as a product manager of Oak and we first were aiming it at the PDA market and the set top box market. This is back in again, 93. So these were immature industries still. All the kinks hadn't been worked out. The infrastructure wasn't in place. And I started thinking back to my days at IntelliCorp realizing that a $20,000 set top box probably wasn't going to ignite a market because Silicon Graphics actually was one of the firms, for example, it was making these set top boxes. They weren't ready for mass market at that point. And the trials that were being launched, the interactive television trials, huge amounts of money, a lot of press and publicity around these efforts, but it was just simply too early. And so we started looking around for other ways to take this technology, this language and language runtime and launch it. Our goal was ubiquity. We knew we had a very powerful technology. This team had built a phenomenal product and we just needed a way to introduce it to the market. And around that time, Mosaic was created and a couple of members of the team found it, realized this is the perfect vehicle on which to introduce Oak. And so we got the blessing from Scott and management team at Sun to basically create an interactive browser, the world's first interactive browser in this programming language, and then actually give the language away, publish the spec, make it freely available for anyone to use and download, and see what would happen. And that's what we did in the spring of, actually, it was a fall of 1995, 1994 rather, that we started this effort. In the spring of 1995, we actually released it. And first quietly, and we had some friends and companies we had been working with who developed little applications in this programming language that, for example, would show an animation in a web page for the first time, or you could move a mouse over the image of a human body and see MRI images appearing as slices cross sections. And this was very, very powerful, seeing it for the first time, because up till then web pages could only display static text. And when people saw this for the first time, we were all blown away when I saw what these guys had developed for the first time. It blew me away, and we started to realize the potential of the web, and not only this programming language Oak, but also the web. We renamed it Java, we launched it in the spring of 1995, and really literally overnight it became a sensation. And it's really because of the developers. The developers discovered it, downloaded it, built the athletes, and people who saw what was possible with the web got very, very excited. Part of it was also timing, that was the era of Windows 95, there's a huge launch that Microsoft was doing at the time, and I think a perception that Microsoft had sort of won the platform wars, and suddenly here was potentially a curve that was thrown in. And so the press also was fascinated with the potential of Java. So a lot of things went into making Java a success, but at the heart of it it was a great technology. It was built right from the ground up by a very talented team, and then developers took it and ran with it, and made it the success that it is today. The sun did a great job, and I think Scott and Bill and that team were very visionary in giving this project a chance, and the results I'm sure all of you are familiar with. So that effort was privileged to be part of, I also met one of the most talented teams that I ever have come across in Silicon Valley, and that's been sort of when I look back at what I've done over the last 20 years, and what's been the guiding principle, I want to work on cool stuff with smart people. And back to IntelliCorp days, that basically was the formula. And so in 1995 I started talking with some of my teammates, three of my fellow teammates on the Java project, and we realized this is a great time to start a company. If there ever was a time to start a company, this is it, and it was the birth of basically the web, and a whole new set of businesses and opportunities was starting to emerge. That escape had just been founded, and it was a communications that was called back then. And so we decided to go out and start a company. We actually really thought carefully about the product and the business first, before just rushing out to do it, we wanted to make sure we had a viable idea. And we actually also met with some of the smartest people we knew, Andy Bechtel-Shim, and other people who gave us great input and advice at that time about how to go out and actually do this. So we founded Marimba, the beginning of 1996, myself, Arthur Van Hof, Sammy Shio, and Jonathan Payne. And our vision was that Java was great, as showing the first example of it, Applitz in a browser, the idea of click and run simplicity of accessing software that you didn't have to worry about the underlying operating system or the infrastructure. But Java was capable of much more powerful client-rich applications, and the combination of both, the click and run simplicity, and the power of having a rich client and the ability to constantly keep that up to date remotely, that was something we knew that companies needed and wanted, as they started to build internet-aware applications and deployed to their customers. There was a whole new set of requirements around distributing software, suddenly, because it wasn't just sending software down the hall, it was, you have to distribute software to millions of endpoints, potentially, outside the firewall, deal with security issues, deal with network interrupts, deal with different platform support, mobile devices, disconnected use, none of that existed before the web. So existing technologies for deploying and managing software from Tivoli and CA and others were designed for a previous era, the previous era. So that's basically the market we entered. We started a company that was designed to deliver software as a service. That concept was new, and it was, this was a difficult kind of message to communicate. We actually got lumped into a space called push. Some of you may have heard of push. It was very big back in about 1997 or so. Here's a company called Pointcast that was launched, and that they were doing something actually quite revolutionary at the time. They showed that the web was not just about clicking and waiting and launching and basically downloading, it could actually be used to push or deliver proactively content information to you. So they had created a screen saver application that would push sports scores and news headlines, very flashy graphics. The images were captivating. And the idea that the web could be used for this was, again, revolutionary. So that became suddenly annoying to the category, largely by the technology press. And then we became part of that category. We were pushing software. We were enabling software to be pushed. And what then emerged was an excitement around push. This is going to be the next thing, Kiss Your Browser Goodbye. And then a huge letdown almost immediately after that because it didn't happen. Pointcast, for example, was difficult to use. It would, for at least the CIO, clogged networks, wasn't really delivering a business value that could support a company at that time. Again, great idea, brilliant, but ahead of its time. And so the whole category sort of became then had a black eye and was considered not ready for prime time. So interesting to see these technology waves, just like AI, AI was very hot in the 80s than it was nowhere. Push was very hot than it was suddenly it was unannoyed. But meanwhile, technology continues. And innovation continues. And what happened was we actually had companies that really needed this technology. Big banks, telecommunications companies, manufacturing companies that were trying to and spending a lot of money sending software around their organization and delivering applications outside the firewall. And spending a lot of money, a lot of overhead doing that. So we built a profitable business. We went from basically 10 million in the first year to $44 million run rate and profitability by 2000. We went public in 1999. And this was a very frenzied time. And we were in the spotlight as a company because four of us had left the Java team. The press became very excited with this. And of course, Silicon Valley was kind of the toast of the world at that time. We were the new Hollywood. So it was interesting building a company in the glare of that spotlight. But we were determined as a founding team to build something of value to deliver a real to deliver real value to customers and build a substantial business. And basically shut out all of the noise around us. And we did that. We brought on a great team. And it was all about the team from the beginning. It's not just about your founders. We had a fantastic founding team. But the people then you bring on in the first waves. We managed to recruit a top notch team and build a very successful company and learn a lot of lessons along the way. So in basically fast forwarding from 99 when we went public, we sold the company in 2004 to BMC. Very successful acquisition. BMC is a company that competes with Tivoli and CA in the systems management space. And by this time, by last year, the idea of software as a service was no longer foreign. The idea of self-managing systems was not strange anymore. And there were companies also like Blade Logic, Mark Andrewsons company, Opsware. We were actually competitors of ours. So there was a sector now that had emerged during the time that we were building Marimba. But we were early. We were in essence too early back in 1996. And I remember thinking, okay, I'm starting to learn this lesson now several times over. And it's becoming a theme. And that lesson is it's very easy to be too early. One of the hardest things about building a company in the technology world is realizing that it's not just about the technology. It's the infrastructure. It's is the market ready for this. And do you have the right partners lined up who can take this product to market. So there are a lot of other pieces that need to be in place and the technology is only one of them. So after leaving Marimba upon the acquisition, I was a CEO and then became the chairman and basically was very actively involved in the company throughout. But basically about 18 months ago, I found myself thinking about what I was going to do next. And there's a lot of sort of doom and gloom in the industry as many of you probably aware. 2001, 2002, 2003 feeling that it was all over, software is dead. And you were hearing all sorts of comments kind of a conventional wisdom being thrown around about the valley had lost its edge. IT doesn't matter. You know, the list of phrases goes on. But in fact, what was happening was under the covers, enormous amounts of innovation. And the groundwork had been laid. The infrastructure was there. Broadband was penetrating everywhere. And now the next phase was upon us, which was the delivery of new wave of services and applications on this infrastructure. So the investment had been made. Everything was in place. You have a whole valley full of experienced time hardwood entrepreneurs and lots of capital on the sidelines and great infrastructure. And that's a formula for a new wave of innovation and businesses to be built. And that's exactly what's been happening over the last three to four years since the bubble burst. This has been one of the best times to start a company. And in fact, I spent that time. There was about six months after leaving Marimba before I joined Spikesource, where I am now. Where I spent most of my time with friends talking about business ideas or helping with businesses that they were in the process of building and launching. So it was only a matter of when I would find the next one that really excited me and ignited my interest again. And the reason is clear, it's not that I didn't have anything to do or, you know, couldn't find something else to occupy myself. It's that this, there's nothing more fun. And being on a mission together with a team of people building something innovative, breaking new ground and really making a difference in the world. I mean, what could be more fun, not many things in life. And that's one of the reasons why Silicon Valley is such a great place to build a career and just to live and be. So basically about five months into this, I got a call from Ray Lane, who was on my board at Marimba. Ray formally was the president of Oracle. And now was a partner at Client of Perkins. And he told me about a company he'd been incubating since the spring of 2003 called Spikesource. And when I went and met with him and met with the founding team, I realized this has all the ingredients that I'm looking for. This company has brilliant founding team, a very powerful idea, a market that seems ready, the timing felt right, great backers. And basically all the pieces that were assembled to build a substantial business. And importantly, groundbreaking technology and a difficult problem to solve, a difficult computer science problem to solve. So after sitting down with the team and spending a lot of time really looking at the new space, I decided to join as the CEO and came in in September of last year. So I've been on board for a little over a year now. The company, as mentioned, is called Spikesource. What makes what we do interesting is we're solving a real problem. So that was one of the lessons also I learned along the way. It's just got to be pain. If you're building something, either there's got to be an enormous untapped opportunity or else you're addressing some pain. In this case, the pain is managing open source components, the complexity of the interoperability of open source components if you're using open source in a production environment. What we do is we basically test and certify open source software. We're sort of an underwriter's labs for certifying open source interoperability. The company's business is a subscription service. So this is the new model of building software company software as a service. We provide the product in the form of pre-configured open source stacks. We provide a choice of operating systems, including windows, by the way, all the major litigings, and also windows, databases, application servers, and then over 100 components. So basically providing the best of both worlds the choice of what to use, not being locked into one particular distro application server or database, but also the support and integration and testing and maintenance that you expect in a commercial software stack. So we deliver this in the form of pre-configured stacks, which are freely available to download from the website. And the company's business really is the subscription service and the support, the technical support that goes along with maintaining those stacks and keeping them up to date. This turns out to be a very big need in the enterprise, in any company that's using open source in a production environment. Probably has a team of people internally doing nothing all day, but scouring news groups and mailing lists and downloading patches and testing against the entire build. Typically an application is comprised not just of the four basic components operating system application server database and web server, but dozens of components. And every time one of those changes, there are dependencies that go across the entire stack, which need to be tested. And then the patch needs to be delivered. And that's an endless process. So anyone who's managed any kind of open source infrastructure is aware of this. And it turns out to be a pretty big cost for companies that are using open source. Steve Bomber has, in fact, issued memos and created a whole website around this called Get the Facts. In other words, highlighting the problem of the challenges and cost of managing open source and sort of do it yourself way. So this is all about taking that, do it yourself process off the hands of the companies and basically automating through testing and certifying through an automated test framework, open source components and providing choice. Delivering business ready open source infrastructure. That's the company's business. So it's a new market. It's a different way of building a software company. And that's one of the things I wanted to talk a little about today is what's changed since since building Marimba. Let me just give you a few more statistics on spike source. We have about 45 people were based in in redwood city. We also have a team in India, an offshore development team. And they're doing they're innovating. They're not just a job shop. And we're really focused on the process automation of managing open source software. We have customers that include software companies like business objects, big banks and and also getting some interesting traction internationally. So this is one of the things that is different about building a company in sort of web 2.0. You go international much sooner because you have a distribution channel which is the web which allows you to touch many more potential customers. I'm sure many of you are immersed with or certainly familiar with open source. But let me just mention a little bit about what makes this an interesting area. Why there's so much venture capital interest in it today. There's a whole group of companies that have been funded over the last year or so 12 to 18 months that have actually been acquiring customers at quite a quite a fast rate. Companies like sugar CRM business objects. I'm sorry, Jay boss sugar CRM Jay boss. My sequel has been around for several years but very successfully gaining market share. Today open source is about a $5 billion market the open source software systems applications and basically anything that is open source related is lumped into that. This is IDC numbers and it's projected to be about 17 million by 2009. Who knows whether that number is accurate but the point is this is a real sector. The companies are investing in it and most importantly, buying. You're also seeing entire nations mandating the use of open source software. So China, India, Brazil, parts of Europe, the UK, even in the United States, the state of Massachusetts, the Commonwealth of Massachusetts, the state of Minnesota. We're seeing CIOs issue mandates mandating the use of open source or having you must have a good reason to use proprietary software if you're not using open source software. And we've also seen over the last six to nine months the rise of the open source application market suddenly seemingly out of nowhere. There's now companies in the area of customer relationship management like sugar CRM business intelligence, document management, content management, systems management and all of these companies are either taking existing open source projects like a company called Groundwork which took Nogios which is a system monitoring tool and they've created a whole kind of open view or tivoli-like systems management company out of this and some other add-ons or they're building from scratch a product like sugar CRM. So this is a team that came out of a software company called the Piphany that decided the world needed lower cost high quality good enough CRM. And in fact the small to medium business market is a great target for this because they've been underserved for so long. They've had to suffer with expensive software that either they couldn't afford or there was too expensive to and costly to implement in support. So the emergence of the open source application market is something that's that's been fascinating to watch just really literally over the last 16 or six to nine months. Why is open source so popular well for companies for enterprises it totally changes the game no no longer are they under the thumb of the vendor. We've been in the sort of dynamic in the software industry over the last 20 years as it as it grew up where we had five terms and turf wars and companies that were battling over platforms and the objective was whether you were Microsoft or IBM or Oracle to capture the customer dominate the platform and lock out the competition and suddenly open source gives customers an alternative. Now I should add that those companies are actively embracing and investing in open source because they see that the change as well and have been part of it. Part of making it happen but choice the fact that vendor lock in is really now a thing of the past and the fact that increasingly quality is as good as or better than commercial software. And that's because you have hundreds of thousands of developers in the typical project you don't have hundreds of thousands but you have dozens or hundreds of active participants oftentimes who are making that code better on a daily basis. So the turnaround for a patch for getting a bug fix goes from you know nine months release cycle in the old days to literally overnight extremely attractive. And that's why big companies that you would expect to be very conservative are actively investing in open source and they want to work with commercial companies that can help support open source. So that's that's why this is an interesting area for venture capitalists. Some people are saying there's there's a bubble. There's now this is the next bubble. I don't I don't think we're in the bubble phase yet. I think we're we're in the mild frenzy phase perhaps but every company that I'm familiar with that's been funded actually has a big deal. So that actually has a viable business model now will everyone succeed? No. But there's a defensible business model and in many cases there are thousands or hundreds of thousands or millions of users already that they are servicing. And source of course is not limited to software open source is a phenomenon that is preventing the music industry media video blogging even DNA mapping the idea that we can share knowledge collaborate open up interfaces and innovate much more quickly is extremely powerful. So it's an idea I think whose time has come and the web really enabled us to happen open source is not a new thing Richard Stalman and many others pioneered the idea of opening software sharing software and collaborating because they saw the power of doing that and they saw the problems with lock lock in and limiting application use to a particular platform. So it's not new and in fact in the early days of software it was all free and open because the point was the focus was the hardware. So we've kind of come full circle in a way but today open source is not just about free software it's actually about delivering significant value to businesses that want to pay for that and that's what's changed. So what's next for spike source we launched the product this past year we are actively building a customer base in a channel and I'll talk a little about channels in a minute we're working with these emerging ISVs so companies like sugar CRM we've developed for example windows installer for sugar CRM that takes the process of downloading sugar and starting to use it from a day or longer because you would have to configure all the different components that go with sugar two minutes. So we're working with application vendors like sugar CRM to basically empower them enable them with the underlying infrastructure so they don't have to deal with that and they can have a dependable reliable platform. And then we're working actively with the open source community as well. So our automated test framework is at the heart of our business this is a testing framework that right now is running 30,000 tests nightly across all the different components and operating systems I mentioned earlier. And the importance of that is not just automation it's also working with the community so we are actively partnering with leading open source projects this is a two way pipe our test framework so we encourage developers to contribute test to our framework the way we got to 30,000 tests was not that we wrote 30,000 tests that we incorporated them from the community of many different projects and participants. So it's a different way of building a company actively engaging with the community and it's in fact one of the seven things that I want to talk about that have changed when I think back to my experience building marimba a decade ago to today and let me just go down that list. So what's different what's different about building a company in web 2.0. First is the importance of working with the community where I just mentioned the collective contribution and the the value that that adds to a product or service companies like Amazon have demonstrated this their user reviews of course have really propelled the popularity of that service they have a commodity open source software is a commodity many things in our world around us are commodities what really adds the values the service that's wrapped around that and increasingly important part of that service is engaging with the community. Giving back and contributing back to the community as well so for example we're publishing all of our test results we're writing test coverage tools we're figuring out ways that we can be of value be of service and Google is a great company a great example of that to their whole mantra is is about being of service and not being evil when it comes when it boils down to it and it's a very very wise strategy because that's how you really get get gain leverage and valuable content number two more and more it's about the data the data is the intel inside in the sense less about IP intellectual property that you want to protect and lock down and patent so for example we are not running around trying to snap up patents and and use those as a as a defense mechanism in the old days many software companies and hardware companies actually pursue that as a strategy certainly very large systems vendors and many software companies have big patent portfolios Microsoft IBM just to name a couple and it's a sizeable business for them but when you're starting a company these days it's it's not necessarily the number one thing you go out and do the data is more and more important in businesses today so for example the data that we have is the knowledge of what works with what configuration information that knowledge base is being expanded on an ongoing basis every test we run ads valuable knowledge about system configuration you know we couldn't possibly write every test and anticipate every system configuration every environment that that application might be run in we need to aggregate that from the community and once we have that expands the knowledge base Google same thing every time you do you do a search you're adding value in the form of knowledge that they're incorporating into making their search more efficient so number two data is increasingly where the IP is number three process automation is becoming more and more important and that's just that is a function of an industry that is beginning to mature and commoditized so if you look back at any industry that's become commoditized mature whether it's automobiles forward figure this out back in the early part of the century or PCs Dell figure this out a few years ago any time that you've got a flood of commodities the value shifts to how you aggregate and distribute those commodities in the service you provide around that and and that's happening today with software so again back to kind of the core business model of spike source and what makes this interesting what we're doing is really process automation around aggregating knowledge about what works with what making that information easy to access delivering it in the form of value which is an ongoing updating and data management service to companies that are running the software. Fourth the shift to services and I think you've probably heard about this if you've taken any any course or work in any company that is involved in delivering software but more and more the value is less about the software and more about how it's delivered and supported. Salesforce.com of course is one of the companies that's really talked a lot about this and made this a mantra for the kind of business that they're building but customers love it. The old days was you had a big lump of software you basically dropped on a customer and the complexity was really on their hands on their shoulders in making it work within their environment or they would have to bring in expensive consultants which you would you would build them for or you know they supported entire industries of of IT consultants who would go in and implement these systems. Increasingly the software is delivered as a service remotely a hosted service. Investors love it too by the way because we're shifting from a model where all the revenues are up front to ongoing recurring revenues a monthly subscription service the idea of sort of antivirus and so virus software style business models where you're charging on an ongoing basis and you make the difference up in volume many more potential customers because the distribution channel of the web allows you to touch many more users. So the idea of software is a service software on demand is a model the whole software industry is shifting to and we're seeing more examples of this every day and the big software vendors are increasingly introducing services that provide this. Fifth difference is the value of the long tail used to be you just focused on you know sort of the 80% the 80 20 rule the 80% of the world that's whatever is most popular is where you focus the 20% you sort of ignore more and more of the value is in that additional population of users who may be using many different products in the case of the world of open source. There are over a hundred thousand projects on source for which is a place where many of these projects are aggregated our value is our values accompany is our ability to support the widest variety of open source components available instead of just supporting this stack and that's it more and more companies are using new components every day and what the flexibility of incorporating them in their environment but still having commercial support around them. So it's the long tail clay shirky is someone who you may have you may read his blogs he talks a lot about this the power curve if you look at the blogosphere the most popular blogs have you know certainly a lot of attention but if you look at the flat side of that curve that's where the largest population of users is and what's driving the growth of the blogosphere more voices and more interest thus in the content that's being viewed. So it's a lot of attention to the world of open source and the world of open source is the most popular one is the big difference is the rise of good enough computing. The world that we've come from is one in which you build big complicated systems stuffed with features and then you know figured that customers would at least use a subset of those so you've delivered the value. So in many companies who are struggling to use very complicated heavyweight bloated software and more and more open source is attracted because it's stripped down. If you look at these applications like sugar CRM and others they have a limited set of features but they're basically most of the features you want to use and in particular for small to medium enterprises for the application market it's good enough. And for systems like Linux itself you can strip down the operating system to just the pieces the components that you want and need and not have to bother with everything else extremely attractive model and also kind of linked into that is the idea of the perpetual beta instead of these long release cycles now today you release a component or a project application and you're constantly updating it constantly evolving it. Aggregating input from the community gets better and better and it's essentially this ongoing beta and Google's done a great job of pioneering that as well. And then finally PR the seventh difference about building a software company when I look back decade ago who mattered most were the industry analysts you had to go to the gardeners and the foresters and make sure that you talk to all the influencers because they were the ones who were whispering in the customers ears what was good and what was not. They still matter but who matters more today increasingly is an influential blogger or a commit or on an open source project someone whose voice really carries authority in the community because of what they've done not because of the title or position that they carry. So those are specific to software but markedly different environment for building companies today and you can also start up a business much more cheaply a tenth of the cost customer reaches instantaneous building a global operation on day one is becoming more and more a checklist item and many companies in Silicon Valley if you don't have some sort of offshore strategy you don't even get funded or at least you get. So you can get some some pretty sharp questions from your investors. What hasn't changed the team what matters more than anything or the people you start the company with and the team you build from there in the first few hires that you make which are company defining. Getting a channel up and running many people overlook this nothing could be more important after the team than finding the vehicle to deliver your product market yes the web is a great distribution channel but there are also some very powerful partners that you can pair up with and it's critical to get those. So you can get a lot of relationships established right at the beginning if you if you can lock them down the easiest mistake as I mentioned earlier is being too early and all ideas all great ideas come back around they're not ready for prime time the first time inevitably the infrastructure catches up they come back around pushes back by the way it's just it's called RSS but it's back focus on the pain solve somebody's problem it sounds so simple but so many people get cut up in the technology and they're not going to be able to do that. And so those are some of the things that we have brought up in the technology and the innovation the invention that they're building and what they want to do they forget to focus on that and then finally sequencing is key. You want to do it all at once you see all the different markets for example in our case we could deliver to fortune ten companies and small to medium businesses and everybody in between how do we do all of that at once you have to sequence it. You can't do it all at once, but you have to figure out where the leverage points are and then map it out. So, let me stop there. I could talk a lot more, but I want to make sure we at least have 10 minutes for questions. Let me just conclude by saying, I know a lot of you are thinking about starting companies and maybe have got advice that you should leave school immediately and go start a company. Maybe you haven't gotten that advice, but I'd say, first of all, this is a great time to start a company. It will also be a great time to start a company, 3, 5, 10, 20 years from now. So, it's not so much about going out and doing it now. It's about finding the right people to do it with and the right idea and then validating that as much as you can up front. Never stop learning. Build your own networks and don't be afraid to go and ask people who've done it before because no matter what, someone's already done it before, likely. And the best learning is experience. And never give up. Failure is the best lesson. Sounds right, but when I go higher people, if they've gone through a failed startup before, it's actually as long as they weren't the cause of the failed startup, it's a plus. Because they've gone through an experience that you just can't get anywhere else, the hard way. So, stop right there and any questions from anybody here or elsewhere. Yes. Why is it so important not to be evil in our business? It's because our business is dependent on the development of, in part, in the development and efforts of many, many developer software programmers. We are, in essence, become a part of that community. We need to be part of the fabric of that community and that means not only taking but giving back. So, that's one reason. Second reason is if you are evil, if you either are dishonest in your business practices, don't treat your customers well, you don't get a second chance. And in this age of transparency and instant information, your reputation matters more than ever as an individual and as a company. That's why. Yes. So, first one was how long did it take before Java was profitable at Sun? I actually left before Java became profitable. So, I don't know the answer to that and I'm not sure how you would really define that. Java certainly drove a lot of hardware sales and services revenue for Sun, just as open source has done for IBM and HP and others. So, certainly it's had a lot to do with the growth of Sun over the last decade or so, but I couldn't answer you the profitable, the profitability question. Second question you asked was about licenses and how do we spike source deal with all the plethora of open source licenses. We are actually not in the business of dealing with that. We help provide information about software licenses and guidance to customers, but more importantly, we partner with companies that are providing services such as LACDUC and Palamita and others. So, we have companies that help reduce the risk of IP litigation or IP concerns around using software licenses. There are over 53 different software open source software licenses. So, we have a source license for our own software. We aggregate and manage components that use a variety of those 53 licenses, but our business is not in managing the IP side of that. We interoperate with all the projects that use the different licenses and then we partner with companies that help businesses make sense of what to do and how to use the different software licenses. Yes. So, a lot of businesses are thinking about today open sourcing their proprietary software. It's a trend you're starting to see. In fact, just this week, computer associates spun off the Ingress project and formed a company around it. That used to be a proprietary piece of software, obviously. So, more and more that's happening. I'd say the rationale or decision around whether to do that or not. First of all, why would you want to open source this software? If you're interested in license revenues, unless you've got big support business and infrastructure, you've already built up around supporting the open source project, it's probably not wise. But if that software can help leverage another product, the sales of, for example, a good example is a company called Digium that was in the PBX device business. They were competing against very large companies and decided to open, to build and then open source their own VoIP PBX software product. That's driven hardware sales for them and made them a much more successful company. So, you got to figure out what's the core, as they say, this is the core versus context topic and what's important, what's critical to your business and what's supporting it and enabling that. So, if the open source supports and enables your core business, that's probably the right decision. Other questions? Yes. Many of open companies have to open source of their IProam or Shibuya and the other ones have to open source of their IProam. Good question. What's the core competence for spike source? It is our automated test framework and our founder, Morgan Powell, back in the spring of 2003, set out to build this thing, which had never been built before, which is a software testing framework, test and build framework that could literally run hundreds of thousands of tests across hundreds of different components. That's what we do and that's back to the core of our business is really about process automation around aggregating, testing and supporting many, many different combinations of open source components. And that, by the way, is that innovation and Morgan Powell himself, the founder, were the compelling reasons along with Ray Lane and the backing of the company that led me to come to spike source. And that was a very important reason. It was a very important reason, because if there wasn't an interesting computer science problem that the team had made significant progress in solving, it wouldn't have been interesting to me. We're using a lot of open source testing tools in our framework. We run it as a service today, so we're not distributing it as a discrete piece of software. So it itself really is open source, but it's not, we're not distributing it. It's made up of open source projects and other stuff we've added. Other, yes. So what are the enterprise software opportunities going forward? The enterprise software market has changed dramatically, as I mentioned. So more and more of the opportunities are in providing solving a business problem and providing that in the form of a service. I'd say the small to medium market, small to medium business market is one that is untapped. Open source is rushing to flood that vacuum. And that's why sugar CRM and other applications are beginning to get so much steam, even though they've only been around less than a year. And delivering that software in the form of a service, because the small to medium business market typically doesn't have a large IT staff on board, you know, can't afford to manage and service the software themselves. So that's one area. There will always be interesting software problems to solve. So all of the talk in the last few years about software is dead and a price software is no longer an interesting space, I think, is been overblown. But what's changed is how you build these businesses software prices have come down dramatically and the business is more about subscriptions, delivering the support and services around the software. Yes. This has been a very, very, very, very relevant talk for the future. And I'd like to ask you if you're advised to give your comments on kind of slightly different areas. I know they're non-profit stuff, but I've wondered about two years old, it's called SciArt. I think this is a very good idea. I've been working on it for a whole year, sort of, insights. About building a nonprofit or about... Yeah, that's interesting. There's actually a company called Salem Radio Labs that's just coming to mind because they've developed some software internally that they've now open sourced and made available widely to the community there in another sector. But the reason I mentioned it is that one of the ways that they've gained support and help from the outside and in fact potentially even some sources of revenue is because they've developed some software which they then open sourced and gained a community around it. So if you're doing development work and there's something, some element of what you're doing that you think could be more widely used, some community that needs that and you have the ability to help launch such a community and support around it. That's a great way to get, you know, basically help and momentum around what you're already building internally and which you couldn't staff yourself. That's just one idea. I'm not an expert in nonprofits but I've seen a few lately make great use of open sourced software and I would encourage you to investigate that. On behalf of Basis and STVP, we'd like to thank Kim Polese for joining us today.