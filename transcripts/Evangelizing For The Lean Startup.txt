 You are listening to the DFJ Entrepreneurial Thought Leader Series. Brought to you weekly by the Stanford Technology Ventures Program. You can find podcasts and videos of these lectures online at eCorner.stanford.edu. It is my sincere pleasure today to welcome a really terrific speaker and a really inspirational entrepreneur. Eric Ries was one of the co-founders of INVUE and after he left that organization, he ended up going to become a venture advisor at Cliner Perkins. And now he spends his time telling people about all the lessons he learned and he has a very, very popular blog called Startup Lessons Learned. So without further ado, I'm going to introduce Eric and he's going to get to tell us all of his inspirational insights. Wow. This is an incredible turnout. So thank you all very much for being here and especially thank you to Tom and Tina and Steve for inviting me to do this. This is a real treat. So right off the top, let's cover the ground rules. First of all, I do not want your undivided attention. So no need. Everyone here has a cell phone or a laptop. If we could just everyone to grab their cell phone, take it out of the pocket. Don't want to take a second, right? Everyone knows how to use Twitter. So please Twitter amongst yourselves. All I ask is that you use the Lean Startup hashtag. Everyone understand how to do that? If not, ask a person sitting next to you. Send feedback comments. Anything you find interesting or uninteresting. Love the feedback. And again, Lean Startup hashtag on Twitter. This isn't incredible. I'm really excited to do this. So how many people in the audience are current entrepreneurs? Just quick show of hands, entrepreneurs. Aspiring entrepreneurs, people hope to be entrepreneurs in the future. That's excellent. The good news. That's very good news for the United States, for Silicon Valley, for our civilization. So I thank you. But let's talk about the bad news for you, which is that most of you are going to fail. And I'm sorry, it's not personal. It's not about your level of intelligence or perseverance. It's that that's the fact of entrepreneurship, that the majority of companies that are ever started fail. And I'd rather demonstration. This is Web 2.0. Everyone remembers that trend. Here's our midterm report card for Web 2.0. This is how we're doing so far. These are the companies that are no longer with us, I'm sad to say. And actually, even some of the companies that are listed on this chart as successes are just financial successes. Doesn't actually mean that they succeeded in validating the incredible human potential and energy and talent that we pour into them. And look, this is a high tech entrepreneurship. So it's a risky business. And we understand that there's going to be some failure. But I think a lot of the companies that are on this chart and across the whole industry fail for really bad reasons. We can do something about that. I'll get to that in a moment. But fundamentally, the lean startup is a vision for how our industry could be different. We don't have to accept the same level of failure that we've gotten used to if we change the way that we operate. And if we're willing to give up on some of our really precious myths of entrepreneurship. So before we get any further, let's talk about what is a startup? Because one of the myths we're going to have to let go is what I call the startup Dollhouse fallacy that a startup is just a shrunken down big company. And that'd be nice if that was true, but it's not. That gives rise to thinking like, for example, big companies have departments. Startups are companies, therefore, startups should have departments, which is wrong. And we'll talk about why it's wrong in a minute. I want to really emphasize this point that startups are not like other kinds of undertakings that you may have heard about, read about, experienced. And because of that, my belief is that although my background is in consumer internet high-tech startups, the principles that I want to present to you today have a more broad applicability. That they work no matter what sector of the economy you're in. As I've been doing this startup lessons learned thing of the past year, I have gotten a chance to meet entrepreneurs in nonprofits, in enterprise, in government. Two weeks ago, I was presenting these ideas at the Pentagon to the United States Army. And I wasn't sure whether they would really get that there's an opportunity for them to behave like startups, but they got it right away. Actually, I just had to say a lot faster than a lot of supposedly savvy tech entrepreneurs. So the thing about startups is that they are human institutions designed to create something new under conditions of extreme uncertainty. And it's that uncertainty that really makes it difficult to transplant practices from other contexts into the startup domain. That's why we usually go wrong with a lot of these myths. And it's a human institution. I include that because we usually think about entrepreneurs as like two guys in a garage. You know, they're eating ramen noodles or something like that. But what makes you an entrepreneur is not the kind of noodles that you eat. It's the kind of business that you're trying to conduct. And so because our goal as entrepreneurs is to create a company, an institution that will outlive us fundamentally entrepreneurship is a management science, which I think is counterintuitive to that kind of heroic mythology we have about entrepreneurs. So why does startups fail and what makes them succeed? If you look at the real stories of entrepreneurs, as I know a number of you will get to do in this class, you'll discover a really interesting pattern. It's not that successful startup founders have better ideas than unsuccessful startup founders. Actually, and I say this as a startup founder myself, most founders have horrifically bad ideas at the start. What differentiates the successful startups from the unsuccessful startups is something we call the pivot. The idea is that as we test those ideas against reality, we discover a surprising truth. That within every bad idea is a kernel of a good idea waiting to come out. And so if you look at the stories of startups, right? They began as doing cybercash for PDAs and then they became the online payment provider for eBay. What? They started out building basic interpreters and then they had the world's largest operating system monopoly. And I know it's fashionable and there's PR reasons to go back and say they knew all along. Then when they made that first basic interpreter, that was just step one, obviously, towards operating system world domination. But that's after the fact rationalization, which unfortunately we're very good at. And so I call it a pivot because when tenacious founders discovered that there's something wrong with their idea, they don't just give up and abandon the whole thing. Instead, they keep one foot firmly rooted in what they learned with the previous idea and move the other foot into the new direction. So it's not a complete change. It's simply changing direction. This kind of zigzag pattern that is what the paths of all successful startups look like. And the premise of the lean startup is actually simple. It's just if we can reduce the time it takes us to do those major iterations, those pivots, and we can increase the odds of finding product market fit and being successful before we run out of money. Does that make sense so far? Okay. So let me tell you some of my stories. Because I've had the chance to put some of these ideas into practice and fail quite a few times myself. And so let me tell you about one of failure, which I refer only euphemistically to as startup number one for reasons you will understand momentarily. This is what startup number one looked like. I came to Silicon Valley to join this company and I was really excited. I didn't know what this company did. I just was put through a really challenging technical interview, told the fly to Memel Park down the street here and show up at this nondescript warehouse and step inside. And here's what I saw inside. I don't know if you can read this banner. We are building something that your friends will lust after and beg to beta test. Yada yada, it's not B2B e-commerce. This is during the bubble and B2B e-commerce was all a rage. We can't tell you what it is, but we can tell you who's on the team. And then here's the kicker on startups. It's all about the team. And I had come to Silicon Valley to learn professional entrepreneurship. When I saw this sign, they had me at hello. I was like, okay, whatever this company does, I have no idea, but sign me up. Because we believed in something I call the IQ theory of entrepreneurship. If you just get the smartest, I mean, ungodly smart people in a room together. And we have them work together on a product. How could they possibly fail? Because there's so much smarter than everybody else in the world. I know we have some pretty smart people in the audience today. So maybe this sounds familiar. Here's the IQ theory of entrepreneurship put together a plan for world domination in this new industry. And this is what it looked like. This is the plan that had me excited about this company, but also, this is why this was a hot company in Silicon Valley. I mean, it was really very exciting to be asked to join. We were going to create a company with a compelling long term vision. So this was not some quick built to flip short term thing. We really wanted to make a lasting contribution to the internet. Change the way people interacted online. Of course, we're going to raise plenty of capital from top tier investors. We're going to hire the best in the brightest. And our aspiration was to create a product for mainstream customers. So we were going to build it and ship it when it was ready not a moment before. Because we aspired to be the next AOL back when that was still cool. Kind of dates us a little bit. And it was considered naive that the next AOL would ship buggy software or would God forbid be consigned to some kind of niche offering. You know, it was only for video game people or something like that. So we did not want that. And how are we going to reach mainstream customers? We had a plan. The plan was we would capture that elusive quality called buzz. People know about that. We were going to have the blogosphere go wild with speculation about what we were building because we were going to build our product in stealth. Now, one was going to know what we were building. We were just to take all these really smart people and disappear them. See, it's like magic. And then people started speculating, what could they be building? And then we started to file patents. It gets very exciting. And the idea was, not just this is a lot of fun, believe me. But when we finally did launch, we would capture media attention that really resonated with mainstream customers so they would try our product. So it sounded like a good plan. I know none of you would do a plan like this, but maybe you have a friend who's attempted this or may be thinking about attempting this in the future. So let this be a lesson because we did something I call achieving failure. We burned through about $40 million building this company. And after the five years of stealth R&D, we failed pretty spectacularly. But what you got to understand, nothing I say the rest of this lecture is going to make any sense at all if you don't grasp that we didn't fail to execute the plan. That was not our issue. We had a flawless execution. So we built a really amazing product, really compelling technology. We did hire the best in the brightest and we had a great launch. I mean, we were in New York Times, Wall Street Journal, CNN, and I had all the right blogger saying, this is the future of the internet. And we just had one small problem, which is that although we got all these mainstream customers to try our product, none of them liked it. And so we couldn't convert all that energy into a workable business. And so you ask, well, how could all those smart people having worked on it for such a long time have come up with such a bad plan? It's because we were crippled by what I call shadow beliefs. These are beliefs that were universally shared within the company. Yet were never ever spoken out loud or ever written down. I'll share three of them with you right now. The first that we know what customers want, which you have to believe if you're going to devote 120% of your time and energy into building a company. But the thing is entrepreneurs have this ability. We call it the reality distortion field. It's the ability to get people in their vicinity to believe things as if they were true. They're not strictly speaking literally true. And one of those things is that people right now desperately need this new technology that we're building inside the reality distortion field. I don't want you to get the idea that there's something wrong with that. All entrepreneurs have it. Good entrepreneurs, bad entrepreneurs. The issue is that there's another category of people that can use the reality distortion field and we call them crazy people. Right? So if you want to create a cult, it's extremely useful to have the reality distortion field. So the crux of the issue is, how do you know if you're in a startup and for those who are in a startup today, well, I know you're not in this situation, but maybe you have a friend. Think about whether the vision that you're following is the vision of a brilliant startup founder or of a crazy person will get to how to tell the difference in a moment. Number two, that we can accurately predict the future, which is something that crazy people sometimes do say, also startup founders. You know, you got to have a business plan if you're a startup and the business plan has to have a spreadsheet in the back in which you explain to your investors that in year five, you'll make $100 million. Anybody willing to admit to having that spreadsheet in the back of their plan? Now I have nothing wrong with having a spreadsheet in your business plan. That's a good idea. The issue is what happens when we start to believe those projections are literally true, like we're no-strudomists and we know what's going to happen. In startup number one, we had the spreadsheet that said in year one, we would have a million simultaneous users. So on the engineering team, we were really excited. Well, that means we need to build a serious, heavy-weight architecture to support those million users when they show up. And of course, when they didn't show up, not only, you know, we wasted a lot of time on an architecture that no one was going to use, even worse, we'd lost the agility necessary to change that architecture because it was this big heavy-weight monstrosity that was patent-pending but ultimately useless. And shadow belief number three, that advancing the plan is progress. When we're in conditions of extreme uncertainty and we don't know what to do, it's natural to just kind of fall back on what we can see and measure. And the easiest thing to see and measure in a startup is milestones. So in startup number one, we were very rigorous about making sure that we hit deadlines and we did what we said we were going to do and we made the plan. And there's a reason why we were able to execute that good plan. We held everybody accountable for really doing good work. The only problem is we didn't have a mechanism for asking ourselves, is this plan any good? Is it worthwhile to advance it? And the issue is that, and this really plagued me as a founder too, that founders are exceptionally good at keeping people busy, right? It's very easy to just, if your charismatic founder is special, you just sell, sell, sell all day and keep your employees really working hard and your investors believing that everything is going to be fine. You may notice this pattern that even when a startup fails, if you talk to the founder the day before it blows up, everything's fine. It's going great, right? We're going great right into a wall. That's the pattern of startup failure. And there's nothing wrong with that because every startup founder knows those stories or those companies that were on the brink of failure and they just managed to pull it out of the tailspin. So we want to keep people busy, but when I was a founder, when I would go to sleep at night, I was plagued by this worry. Okay. I spent a day of my life and a lot of lives of all my co-founders and employees and investors. We spent money, we spent energy, but did we make any progress? I didn't know how to answer that question. And like I said, I know you don't want to flip it with this condition, but maybe you know a friend who has that worry too. So the shadow beliefs, I mean, it's easy to make fun of people who think they can break the future and crazy people and all that. But I believe that as an industry, we have this problem that we talk a good game about how we are going to listen to customers and we're going to innovate and do all this amazing stuff. And we don't say these shadow beliefs out loud, but if you look at the plans that we routinely make for companies, I think you find them rife with shadow beliefs. And so step one is of course to speak them out loud so we can talk about them. And then my hope is that in the future, we can stop believing them or at least call them into question, which is something that I got the chance to do in startup number two. Start number two, I can actually talk about by name, it's called InView, it's a 3D avatar social network and instant messaging product. I was actually just doing a version of this presentation in Japan, so I have these screenshots, InView is now a worldwide sensation and very successful and I'm very proud of it and that's great, but that's not what I want to talk to you about. I want you to go back in time with me to 2004. My co-founders and I had just, we'll kind of refugees from startup number one. And we just had this very embarrassing failure. Way in the public, we wasted a lot of money, there are people in this room whose money we set on fire. I'm sorry. So we thought, all right, we did everything right by Silicon Valley standards and we were praised and we were in this hot startup and everything was supposed to go fine and we got humiliated. So we thought, well, for God's sake, let's just try to make new mistakes this time. Because what's the worst to get at? I mean, seriously, start number one is about as bad as it gets. And so we built a new plan for InView and I'll tell you a couple of its key components. The first is that we ship this product in six months. So I'm talking about the full 3D, instant messaging, social networking, virtual currency, user generated content, blogging, photo galleries, the works in six months. I can see the smiles of people in the engineering department. I can always tell because they're doing the math. We call it the scope math in engineering, right? Okay, wait a minute. The budget was fixed six months and we didn't have any money. We were brand new startup and you built all those features. So something had to give and I want to be super clear about this. This product sucked. Okay. I was the VP of engineering. I was horribly embarrassed to show this to customers. But we were determined that this time we were going to find out whether anybody wanted to use this product. And I admit we were a little bit nervous. If you brought this crappy product under our own name, any journalist who wanted to could have gone to the website and they could have written an article about idiots from startup number one, foolishly don't know what quality software means. And we were worried customers would try it and then they would see that it was terrible and they would tell their friends and we ruined our brand. I mean, we had these phobias. But we needed to have worried because nobody used it because nobody cared. Those of you who are actually shipped the product online know that you don't just put it out there and all of a sudden everybody starts using it. In fact, we did such a bad job in marketing the product that nobody ever discovered how bad it was. Well, not exactly nobody. See the thing is we charge money for that product. Which I know it's a bad idea, right? It's a horribly buggy product that would crash your computer and we're charging money for it. But it's not that absolutely nobody would buy that product. Actually, we had certain people who were willing to pay us money for a product that basically didn't do anything. And you got to ask, who are those people and what's wrong with them? That's a true early adopter. Those are people who were buying from us, not the product as it existed at that time, but the vision of the product that we thought it would be. And some of founders don't always like to hear this, but visionary customers are often smarter and more visionary than the founders of the companies that serve them. And so by being in constant dialogue with them from almost day one of our company's life, we were able to learn a lot of important lessons about what the product needed to become in order to eventually achieve mainstream success. We also ship the product multiple times a day. And this is often considered a particularly bad idea because you think about all the things that can go wrong. And I just want to be real clear what I mean. Engineer would check in code to the main trunk. There's no branches for those engineers in the room. And 20 minutes later, that code is live in production. So I got some thumbs up for part one of that statement, but I didn't get any from part two. I got one. All right. Yes. Excellent. We love it. Right in the front row. I like that. And if you think about all the things that could go wrong, right? So some... Thank you. That's excellent. Thank you very much. Exactly my point. But you know what? Here's the thing. You recover. It's fine. It's not the end of the world. Mistakes happen. And I'll talk about at the end of the presentation if fate allows. A practice called continuous deployment, which is the methodology for being able to ship software this frequently without having the kinds of problems you'd like you just witnessed. We didn't do any PR. There was no launch. We didn't want to repeat the stealth mistake of startup number one. But we also didn't want to be distracted by serving any constituency other than our customers. And all I can say is that this company has done well. In view, it's pretty private about its results. But suffice to say here in Palo Alto, it is a going concern. And I'm very proud of what we accomplished. So I had a chance, as Tina said, to spend some time as an advisor to a number of companies to working with some venture capital firms and writing this blog, StartUpLessonsLearned. And I got to kind of ask myself, well, how come when we did everything right, we got a horrible and embarrassing result? And when we kind of did everything wrong, we got a better result. Is that just an idiosyncratic fact of our existence? Or is there some pattern in that noise? And my study of StartUpSthroughout, Silicon Valley, and elsewhere tells me that there actually is a pattern here. I encapsulated as something I call the Lean StartUp. And so let me just tell you a little bit about what that theory is. There are kind of three basic pillars of the Lean StartUp that allow Lean Startups to go faster than their non-linear competitors. The first is the commodity technology stack. This is the idea that we can introduce leverage into product development. And this has been well-worn territory. So I won't rehash it here. Suffice to say that, yes, this can make building new products cheaper. But I think what's really interesting is the amount of time it takes to build really interesting new products is falling fast. And even in the last five years, this has gotten really exciting. So I was really proud in an interview that we only took a six months to put that buggy prototype out. But if you wanted to pitch me on that same product today and said, you were going to wait six months bringing it to market, I would laugh at your face. I mean, seriously, the ability to build really big, interesting new products in really small amounts of time is, I think, unparalleled in history. The second is a methodology called customer development, which we'll talk about, the ability to discover what customers want before it's too late. And the third is agile or lean product development. But not the kind of agile that has been practicing big companies kind of tuned for the start of condition. And since we're here, I thought I would just plug on the topic of customer development. This is Stanford's own Professor Steve Blank. This is the definitive book on customer development, the four steps to the epiphany, bitly, slash four steps. For those of you who are on laptops, just take a moment. You can go buy it now. Go ahead. Everyone has a copy. I trust. Bye now. Okay, good. So let's talk about agile product development. And what I want to do is try to convince you that the experience I had in startup one and startup two was not just my idiosyncratic experience. But in fact, represents a kind of a larger trend. And so I'll do that by showing what I went through schematically. And I just, a point of disclaimer, since I don't know, everybody here is interested in software startups per se. Let me just say that that is my experience. But I think these principles have broader applicability as I said at the beginning. But I also want to say, I don't mean to be melodramatic. But I do believe that the future survival of our civilization depends on our ability to reliably ship new kinds of software. Why? Because every product in the industrialized world is either contained software in it now or is built with software assist. So if we accept the same kinds of failure rates that we've gotten used to in the software industry globally, then I think we're in real trouble. I don't think we'll have to wait for robots to take over our civilization. We're doomed anyway. That's a digression. It's traditional, you know, talk about development methodologies to beat up on the waterfall methodology. This is kind of the traditional way people were taught to build products. This is how I was trained as an engineer. So I will. Waterfall is this idea that you take a product idea. You turn it into some kind of requirements document, then you collect specifications. You build a design for you implement it. You hand it off to some kind of QA function and then it enters into maintenance mode. So a fundamentally linear batching QA of building products. And although that's fun to beat up on, because of course this is what makes achieving failure possible, because you're getting all this positive feedback about how you're advancing the plan, even when you're advancing the plan off a cliff, it's actually important to understand that waterfall is an appropriate methodology to use in a certain context. The context when both the problem and the solution you're trying to solve are relatively well understood. When you can model what's going to happen in the future, you want to do this. The issue is that in almost all high-tech product development, this is not true. If you look at the academic research on, for example, I know IT projects that are built using waterfall something like six out of ten of them fail outright, think about that. The lucky four out of ten are the ones that come in way late and way over budget. Six out of ten never finish. They just enter the batch size death spiral and you never hear from them again. So luckily as an industry we've been working on doing something better, it's called agile product development. And the insight of agile is that we can eliminate kinds of waste from our development process. In waterfall. For example, when you build a specification document that goes stale or you have a meeting where you accomplish nothing or you build extra APIs that you might need in the future but then actually want to not needing that all that's waste. And so what we want to do is build the product itself iteratively so that we change our unit of progress from just advancing to the next stage to creating a line of working code. So like the canonical extreme programming, example extreme programming is an agile methodology as diagrammed here is something like a big company needs a new payroll system. And so when you're building payroll you don't really have to ask what problem are we trying to solve. Every company makes payroll or it's going out of business pretty soon. And so what you would do in I know traditional waterfall, even those projects fail, but under agile we would actually collapse the feedback cycle time. So we would take a in-house customer or a product owner who knows a lot about payroll and we'd sit them next to the engineers who are building the products. So that they have a question like how does deferred amortization work or how should the screen look or like what is payroll seriously? How does it work? They have somebody they can turn to and get an authoritative answer. Excuse me in-house customer, can you explain this to me and they can have a dialogue on the spot at the moment that the question arises. And so under agile we can do big IT projects substantially better because we're living in a world where the problem is known it's the solution that's unknown. And if only startups lived in this world we'd be fine. But of course this is what it looks like in startup land where both the problem and the solution is unknown. So let's say you want to do extreme programming who you're going to sit next to the engineers. If you don't even know who the customer is. Startups face this problem that there is no authoritative answer yet to the questions they want to ask. And so what they need to do is combine an iterative process of customer development with an iterative process of agile development tied together in a company wide feedback loop. And what's interesting about this is it changes the unit of progress in an interesting way. And I had to learn this the hard way. Remember I talked about how an agile progress is a line of working code. So you're doing agile. Fundamentally if you wrote working software today and you go home at night you can feel good that you made progress. At InView we had this strategy. It was brilliant. Here let me tell you. We were going to build this instant messaging product. And people here are familiar with the theory of network effects. That the value of a communication network increases with the square of the number of participants called Metcalfs law. And so the theory would say you can't create a new instant messaging network. Because everyone's already on some other IAM network. And in order for them to use yours they would have to bring all their friends with them. And that's really cumbersome. So that creates a barrier to entry. And therefore you can't just make a new network. Not going to work. So we had this brilliant strategic idea. We would create an instant messaging add-on. They would interoperate with all of the existing networks. And then we would kind of solve this problem by not requiring people to bring their friends and learn a new body list and all that stuff. And at the whiteboard that seems like a really clever strategy. The only problem is that everything I just said about the strategy of network effects etc. is wrong. Those are all incorrect statements. They just sound good. They look good at the whiteboard. Leaving aside the question of why is that such a bad idea? I want you to empathize with me personally for a second if you would. It's all about me I'm speaking. I was the one who wrote the software to do IAM interoperability across all those networks. And I had to be drawn kind of kicking and screaming to believe that actually all that code even though it was well factored and I had the unit test. It was well documented. It was actually all waste. So if I spent the last six months of my life just doing nothing building no software at all I would have contributed just as much value to our corporate bottom line is if I had killed myself writing the software. I mean I couldn't believe it. Here I'd done everything right. Again, I'd use the extreme programming Agile everything and yet I created this totally wasted software. Why? Because the biggest source of waste in the startup is building something that nobody wants. And that's not a technical problem which is kind of frustrating right. My theory was I could delegate the business issues to somebody else. I just focus on building good technology and I would be successful and unfortunately startups don't fail because the technology doesn't work. They fail because nobody wants what they're trying to build. And that's what I talked about at the very beginning that a lot of startups are failing for a bad reason. And not because they're taking a lot of risk. It's because they're building something that basically they could have found out ahead of time nobody wanted. And that's why we have to break down some of these myths. If you want to operate this way, you've got to get rid of the traditional departmental silos that we build companies with. So my suggestion is instead of we have business and marketing sales, forget that, we have one cross functional problem team trying to answer the question, who's the customer, what problem are we trying to solve while we concurrently have what we used to call engineering opts in QA, a solution team that's trying to answer the question, is the current hypothesis for our product any good? And these two teams operate independently but in close synchronization. That's what allows us to discover that the current pivot we're on is no good and pick a new one. So to simplify a little bit, here's the fundamental feedback loop that power startups. This is based on the work of a fighter pilot named John Boyd if anyone's familiar, I highly recommend you look up his work, something called the OODA loop. The idea here is that every software company, every startup really, is a catalyst that turns ideas into product. And then we measure that product against reality to discover if it's any good. We collect data about that, qualitative and quantitative. And then hopefully we learn for the next iteration. Okay, that's not controversial. But here's the key idea. We need to measure every proposed process change, employee product, everything. These two be measured against this simple question, does it minimize our total time through this feedback loop? And that's the problem. With most of the practices that we transplant into startups from big companies and elsewhere, they generally are designed to optimize only one stage of the feedback loop. For example, when I was head of the engineering department at Infu, I had a no metrics rule. So I was like, look, customers don't care if you have good metrics. So building them is a kind of waste. And I thought that was really clever because I was able to eliminate kind of waste I'd seen at startup number one, which is generating all these reports that nobody reads. The problem is that when we ship that product, I mentioned that basically nobody used, we couldn't figure out why. We just assumed that we liked the product so other people would like it. And so we would start to bring in customers. I was also our first VP of marketing. I did our first $5 a day ad words campaign to bring 100 customers a day to our site. And I assumed that we would get half of them to buy it, which any of you who've done direct marketing would be laughing. Because we'd be very lucky if we got one out of 100. Of course, as you know, we got basically zero. And day in, day out, we would make the product better. And zero out of 100 people would buy it. And we just assumed that that was a payments issue. Like we needed to improve our marketing at the point when people were trying to make the sale. That didn't do anything. So then we started to do, all right, we'll do a little bit of metrics. Like how many people even downloaded the product? Zero. Huh. Well, how many people tried to download the product and failed? Zero. You start to work your way back up the funnel to be like, well, how many people got from page one where they landed on to page two? Zero. Okay. So the problem that we had was not that we had this horribly buggy product that crashed. It was that we couldn't even get people from page one to page two. And so we had to start to add metrics to measure the process of users coming through our product to understand what was happening. But our goal wasn't to create as many metrics as possible. It was to create as few metrics as necessary to get through this feedback loop, all right? So everything I've said so far is completely theoretical. And I want to just try to blitz through a few specifics before we have time to take some questions. What I thought was, let's talk about three specific practices. And what these practices all have in common is my belief that each of them, although they operated one stage of the feedback loop, actually optimizes the total time through the feedback loop. That's the test you got to use whenever you're evaluating a startup process. So I'm going to talk about continuous deployment, something called minimum viable product, and then five wise. Here's continuous deployment. That's what I talked about before, that 20 minutes between checking in code and having it live in production. So here's the magic that allows you to do that without, you know, taking the site down. In order to do continuous deployment, you have to be able to actually physically deploy the software quickly, like I said, about 20 minutes. Most of that 20 minutes is actually not the mechanical process of doing the deployment. It's trying to certify that this change is non-harmful to the business. So just to give you an example, let's say like it's April Fool's Day and you were back at my old office in interview and said, hey, this would be hilarious. Let's check in, I don't know, an infinite loop to the front page of imview.com so it doesn't work anymore. And let's deploy that because that would be hysterical, right? Okay, you know, we go back to my desk, we'd make the change, we tried on my local sandbox, it would blow up, we'd check it in. And sometime in the next 20 minutes, I would get an email from the cluster effectively. Dear Eric, thank you so much for attempting to check in that change. It's a terrible idea and it's automatically been reverted. And not only that, we've notified everybody on the team that this happened and that something has gone wrong and nobody else can make a change until someone gets the bottom of what happened. We of course have to be able to do that revert quickly and that's got to be true, not just at the level of unit tests and automated tests because an example I just gave is kind of easy. Okay, if I make the whole site not work, we can have tests that catch that. Let me give you a better example, this is actually a real example. Instead of doing that, I'm going to change the checkout button in the e-commerce flow for imview. I'm not going to remove it because a test would catch that. I'm just going to make it white on white so it's invisible to humans. Okay, so now we're going from having a business to having a hobby. Not a good change. And again, the same thing would happen. In 20 minutes, that thing would be automatically reverted because the system has the intelligence necessary to know that we've made a change is going to impact our business metrics in a catastrophic way. This idea of shutting down the line when that happens is really important. This is kind of by metaphor to the Toyota production system. Everyone's heard that story of the Andon Corps, the Corps that any worker can pull to indicate that there's a quality problem that stops the whole production line. Even though it's very expensive to have the whole production line stopped, it's even more expensive to let a quality problem kind of fester and proceed down the line. So we use the same idea to lean startup. To say, anytime we have a test failing or a regression that's hit production, we want to stop everything and create the space for human beings to get to the root cause of what happened. In order to this all to work, we have to work in very small batches. So just for the engineers in the room, we have one engineer working on a project safe for three days without checking in and deploying. We would consider that to be an extremely large batch. And kind of be like, what's going wrong here? We certainly never have a whole team of five working on something for two weeks, all by themselves generating integration risk. No way. And that means we have to break large projects down into small batches, which is actually a lot easier than it sounds. Because 80% of the work of any new feature is actually all the like deep interchanges we have to make to reconcile that feature with all the other features in the product, make sure we didn't break anything. So there's just hundreds of little changes that are all supposed to be without side effects. Right? And our theory is, if you make a change and it supposedly has no side effects, let's deploy that change right now and be sure. Here's what it actually looks like from a technical point of view, for those who are technical in the room you'll know what I'm talking about, for everybody else. These are some keywords you can take back to your startup someday and say, hey, are we doing any of these things? We run all of our tests locally in a sandbox. Everyone in the company has the ability to run a simulated version of the product on their own desktop. We do continuous integration using a service called buildbot. That means we have unit tests, functional tests, acceptance tests, every kind of automated tests you can imagine. We do that process of incremental deploy that's monitoring the health of our product as we're doing the deployment to see if there's a problem so we can do it revert it fast. And of course we do real time what we call predictive monitoring, which allows us to get a human being up in the middle of the night if we have a catastrophic problem. But here's the most important thing we do. Whenever somebody sees a failure we want to get to the root cause of why. So we're going to ask how come our defense mechanisms, the cluster immune system didn't catch this. And every time we fail to catch it we're going to make our defenses a little bit stronger. That's the essence of continuous deployment. Let me say a word about minimum viable product. I know people will have heard of this phrase at least a little bit. The idea here is we want to kind of, most startups are torn between these two different approaches to building product. One of which I call maximizing chance of success says look we're only got one shot at this. So let's get it right. Right? That's what I talked about. Start up number one. We're going to ship it when it's right. And that actually is perfectly rational. If you only have one shot you want to take the best shot you can build the most perfect product you can. The issue is of course you can spend I don't know say five years of stealth R&D building a product you think customers want and then discover to your chagrin that they don't. So the other possible extreme approach is to say well let's just do release early release often people have heard that phrase. And this just says look we'll just throw whatever crap we have out there and then we'll hear what customers say and we'll do whatever they say. But the issue there is if you show a product of three customers you get 30 opinions and now what do you do? So minimum viable product is kind of a synthesis of those two possible extremes. We want to figure out what's the minimum set of features necessary to engage with those early evangelists to start the learning feedback loop going. And so sometimes I get the last question well how do you know if you found the minimum minimum viable product? And from a theoretical point of view this is quite challenging. You could make a really interesting argument that any given feature is absolutely 100% necessary to learn. But the good news is there's no reason to deal with this theoretical issue because if you're like me and like every entrepreneur I know what you think the minimum viable product is is way too big. Probably two orders of magnitude, too many features. I'm not exaggerating. So the easy formula for finding out what the minimum viable product is is take what you think it is right now and cut it in half and do that two more times and ship that. And I know I know customers are going to absolutely hate that thing that's only one eighth as big as you thought it should be. And that's fine. If you ship that in customers say you moron how could you have shipped without having features x, y and z the things that were all going to be on your roadmap anyway. You can say good idea, good point and then go build features x, y and z. But you may be surprised, well of course not you but maybe you know a friend who would be surprised to ship a product as I did and nobody cares. They don't say you idiot it should have features x, y and z the worst fate of any shipping any product is just nobody cares. You don't get any feedback at all. That's what most features on most products do. They're just dead weight. So what we want to do is try to eliminate those and ship without them. Of course that's because visionary customers can fill in the gaps. Early adopters can be very forgiving of missing features. They see the vision and you can be in dialogue with them going through that learning feedback loop. Here are the reasons why people don't do the minimum viable product. I'll just try to address them really quickly. First the fear of the false negative. So I ship my minimum viable product. If it had just had that one extra feature customers would have loved it but because it didn't of course they hated it. So why would I bother shipping something I know customers will hate. And there's nothing wrong with that reasoning. All I want you to do is ship anyway. So maybe customers will love it even though it doesn't have feature x. And then you can kind of go on and be very successful. And if you're wrong and a really unique feature x then you can just build feature x. If you want to do minimum viable product you have to be prepared to iterate. And so you have to have the courage to say yeah we'll ship something get negative feedback and respond. The real real startups real products always have these key features that are always one milestone away. Right. There's like the a features that we're going to build next right now and then the b features that are going to happen in the milestone after. And if you've ever done this in real life you'll discover those these features that are perpetually in category b. They never managed to get into the current period. They're essential features that just but customers actually want this thing over here. And so you need to just accept that. That's fine. It's okay to have the fantasy that one day you'll build this amazing other product. Meanwhile, you're being really successful with the product you have today. You need to allow that to happen. Give yourself the freedom for that to happen. The visionary complex that customers don't know what they want so why the hell am I asking them. So customers do not know what they want. But when you show them a prototype and get their feedback you can learn interesting things about what they do want. So they may say I hate this when in fact they would have liked it if it had a few more features. The idea of this is not to abdicate your judgment and responsibility for figuring out what customers ultimately will want. You're acting on their behalf not at their request. And then of course my favorite which is that you're too busy to learn. So I sometimes get the question how can you afford to spend all this time collecting all this data and it's like how can you afford not to. I don't really understand that one. And the last I'll just go through briefly something called five wise. The idea here is that whenever something goes wrong we want to understand what's the root cause. And this is a little bit frustrating especially for the more engineering types because it means that behind every supposedly technical problem there's actually a human problem that caused it. And if you don't find out what those human problems are you're never really going to learn and make progress. So just give you one quick example. Some code gets checked in and it takes the site down and you're like huh well why did that happen. Some engineer uses really obscure API that you know if it's not used properly it takes the site down. It's interesting. Why did they do that? Oh there are new engineer and they were never properly trained in the use of this API. Well that's odd. Hulcomb they were never properly trained. Oh it's because their manager doesn't believe in training. What? We thought we had a technical problem with a server going down and we actually have a managerial problem that relates to training. My suggestion is that you do that analysis whenever something goes wrong and then you make what we call a proportional investment at each of the five layers of the analysis. So you don't say oh we found a problem therefore we're taking the next six months off to do prevention but you also don't do nothing. You try to find at least one improvement you could make at each of those five stages. So we'll bring the servers back up, we'll fix that API, we'll go train that engineer and of course we'll have a conversation with that manager. But the manager might say oh sure I'm happy to do a new training program for new engineers. They'll take about eight weeks so if you don't want me to do anything else for the next eight weeks I'll work on training. Which is basically just a fancy way of saying screw you or not doing it. That's manager speak for not going to do it. And the idea of five wise is instead of having that negotiation that's all on nothing you say that's fine. I want you to do the first hour of your eight week training program. It's like what? I can't do anything in an hour. It's not true. You could set up a training wiki and just create a page that says training program goes here and that's it. That's all we're going to do this time. But see the next time we have a training problem and we do five wise we're going to notice this problem again and we're going to do another hours work on it and that person say well I'll create the training wiki it's like sorry do that's already done. Now you need to do hour two and if this problem keeps happening we will naturally invest time wherever the problems really are in the kind of technical human combination system that is our product development team. That's five wise. There's a lot more that I wish we could talk about. Of course we have very limited time today. A lot of these techniques are discussed in the blog, start up lessons learned. I also am available to do speaking and so on and you can learn about that online if you are interested in learning more. Before we close though if you're willing to indulge me just I'm going to ask everybody just do this exercise just trust me and I'll take a moment. Can you all close your eyes? I always interested to see what ratio of acceptance I get to this idea. Thank you very much for doing that. My belief is fundamentally you are ready to do this right now no matter what company you work for or what your job is or what's happening you can do this today. So I ask you to visualize something you could do that you thought of in the last hour. It could be something I suggested could be something I should have said but didn't it could be the opposite of what I said because you know better whatever. Something that you could do in one day to impact whatever company or organization you work for now and just visualize what that thing is. And that's it. So thank you all very much. I really appreciate the opportunity to be here. This is my contact information. Please get in touch. Thank you all very much. So Eric thank you very much. I'm Steve Blank and our class the spirit of entrepreneurship is I think at least a quarter of this audience. Can you raise your hand class and good wave. We can do the wave. So our class actually meets before and after all the ETL lectures and today's extra bonus for our class is as we end today Eric will walk over with us to our classroom and that is the exclusive for being in MSNE278 as we get Eric. But in the meantime Eric we have a couple of questions called from the massive amounts of questions I've gotten and I want to ask you the first one which is why do you think the lean startup concepts are only now being adopted. Only in the last two or year or two do I start hearing about them. What's changed is that the venture community's mass adoption is a change in technology. Does this only work for web companies? What is it and what is it we should understand this happened? Yeah there's a real interesting confluence of events that's made this interesting now. I mean there's Steve and others have been talking about some of these ideas for quite a long time but there's a couple of trends that are really interesting. One is that's just the technology trends. There's a fundamental democratization of entrepreneurship that has happened as a result of new technology. So talking about the commodity technology stack what that means is that there's incredible new products that you can create without having to ask anybody for permission without having to get a proprietary license agreement or having some kind of government approval. Basically if you can imagine it you can build it is pretty much the de facto way that we operate in a number of industries. So that means it's just a lot more startups available. That's one trend. The other is that as high tech industries get more mature we're starting to move away from technology risk businesses to market adoption risk businesses. So we used to say I want to build a new semiconductor like someone's like hey I'm going to invent teleportation. The issue isn't like if you invent teleportation will anybody want it? No we understand that there will be a market for teleportation. The issue is what reason do we have to believe that you can build that? Different in technology and market risk. And then the third thing I think is the economic downturn. I think that when money was plentiful and there's a lot of structural reason why that was just an incredible amount of money being invested by private equity and pension funds, intervention capital funds who then passed it on to entrepreneurs. It was a really an opportunity to create the most successful kind of business there is which is a Ponzi scheme. You just collect as much venture money as you can and pay it to yourself by trying to convince people that you're making progress. And you know there was a time when if that was what you wanted to do was get rich that was a pretty decent way to do it. But I think now we're seeing that is kind of dry up and so people are trying to remember that entrepreneurship is not actually a get rich quick scheme. In fact entrepreneurship is not a very good way to make money. If you want to become rich there are a lot more rational and easy ways to do it in a career that has a rational career path where effort will advance you to the next level and you will eventually become wealthy. So as entrepreneurs if what we want to do is build companies of lasting value and you know the venture money is starting to become a little bit more rational venture investors are going to get a little bit more savvy. This is opportunity to talk about well what is the best way to build a company to maximize its chances of success? I think that's what's happening. And I'll take the last question for 278 and then we'll open it up to the audience. When you were at M.F.U. you and your partner made a series of critical decisions about the company which eventually led you to lessons learned and the lean startup. So what were two or three of those critical decisions as an entrepreneur, as the head of engineering and head of marketing that were obvious and non-obvious at the time as an entrepreneur? Yeah. What's interesting is that you know I talked about how it's easy to do after the fact rationalization that says the key decision was having me in the company and I had all the good ideas and therefore of course that's what causes to be successful. But if we're being honest you got to really look at not what are the smart decisions that we made but what were the previous decisions we made that caused us to be in a situation where we would make good decisions on an ongoing basis? That's what I talked about entrepreneurship as a management science is crafting a new institution such that everybody in it will make good decisions on average. So like for example when we shipped that early product we had a revenue plan that we tried to make. I think the first month's revenue target was $300 and it was like $350 the next month. I mean we used to have investors that would say are there zeros missing and the graph right? Is this in thousands and we've like no it's in ones. And look it's actually a lot harder to make $300 a crappy product than maybe it sounds. And so what we have what happened after a few months we couldn't make the revenue plan anymore. I mean we sold to all of our friends and family and everyone we knew got them all to buy not as easy as it sounds. And then we started to do that $5 a day ad words and bring people in and they wouldn't buy and we started to get ourselves in a situation where we had these even very small targets that we couldn't hit. And it was that total failure to do what seemed like a very easy thing that caused us to be interested in well why is it that customers aren't buying. So then we made a lot of good decisions like all right well let's do some metrics and measure let's bring some customers into our office we did about three usability tests a week talking to customers to say hey is this the right thing. And then I'll talk the flip side of it which is that because we kept failing to make the revenue plan and we were still working really hard eventually it became clear that the reason we weren't succeeding is not that we weren't working hard enough. You can kind of believe that for a certain amount of time but eventually it's start to say you know what maybe just maybe the reason we can't drive these numbers up is because we have the wrong product so we need to pivot. And that's kind of the interesting pattern you see with pivots even though it's the problem team whose job it is to be trying to figure out hey are we solving the right problem. It's generally the solution team the product development team that discovers it's time to pivot because they're just banging their head against the wall right. The theory says if we make this product just a little bit better we'll do a little bit better with customers and yet zero zero zero zero eventually the solution team will say you know what it's not that we're not working hard enough it's that we're fundamentally going in the wrong direction and that can create the context for the company to have the brilliant product insights that then we all take credit for later to say well I knew all along that you know that was going to be the key feature. Great so let's take questions from the audience now and let's see let's start in the back and Eric if you could repeat the question when it gets asked. Well loud. So you mentioned the feedback loop but that's really great but the hardest part there is like the measurement part of it and you mentioned you need to get users and that to the right to the right kind of users. The problem is in this day and age where there are like thousands of startups especially in the way that we're trying to compete for their users. So how do you get those users and how do you solve that key distribution sort of problem that then makes the cycle go around. So the question is feedback loop is great but the hardest part is measuring what customers want to. How do you even get those early customers to begin with? I love questions that start with X is great which means actually X is not great. So thank you for being actually a challenging question which I hope other people will. I don't think this is a distribution problem. So in a big company when we're talking about getting users we're basically talking about distributing a product as many people as possible that's a marketing or sales function. We're talking about getting users for a very different purpose. We don't want to get as many users as possible and guess what we don't have to worry about getting the right kind of users not a problem. The only customers who will talk to you at all if you're in a startup are early adopters by definition. So you don't need to worry about like if someone's willing to talk to you don't be like well they're not the right user. The fact that they're willing to waste their time talking to a startup means they're probably an early adopter of something. So the specific tactics of how do you get those users really depends on specific industries. I'm a big believer in search engine marketing. You know that has really democratized access to new customers. You know Google AdWords is a great product. For doing that I've also heard stories of people having really good luck with very cheap campaigns on stumble upon which allows you to buy clicks very inexpensively. There's some people using Facebook ads to be able to target specific kinds of users. And one thing that I have heard a really interesting story about is you have a product that's designed to compete with some other product and you create a Facebook ad that just says that other product sucks. That's the name of the ad. Who clicks on that product but people who are frustrated with the status quo and that gives you an opportunity to talk to those people. So that's the kind of technique you need to use to get to those early customers. Yes. Thank you. Any other questions over here? You just said that at some point in developing on view you're like really wondering are we doing the right thing? Are we going in the right direction? Then you said we were working on the proposal. So we have to make a pivot. What did you do? What did you change? Oh yeah. Well the question is, at a certain point I said we noticed that we were kind of barking up the wrong tree and it was time to pivot. What did we change? How did we do the pivot? The earliest pivot we did was from that instant messaging ad on I described that interoperated with other clients to a standalone instant messaging network. That was really counterintuitive to us but we discovered it by doing a lot of in-person customer interviews and usability tests. We thought we were going to be building a product that was in the social gaming space so therefore the target demographic would be kind of a state home moms and we really surprised to discover that was all teenagers who were using it. When we kept being like these teenagers are clogging up our system we got to get them out of the way so we can talk to our target customer. So we tried a lot to purge the amount of system we couldn't do it. We couldn't get them away. We had all teenagers and so we started to do these interviews with teenagers where we'd have them come in create an avatar and use the product and we'd have this really interesting phenomenon and they'd say oh this is creating an avatar that's cool. We'd say okay great. It's time for you to invite one of your friends on your instant messaging network. They kind of look at us and say yeah no thanks. They say why not? Like yeah I don't know if this thing is cool yet and I don't think I want to invite one of my friends or something that might turn out to be lame. See we didn't understand how important social capital is to your average teenage high school student. So we'd be like look no try it try it. It will be so cool. We tried everything we could to convince them that it would work and they said no pretty much a deal breaker and they kept saying well I want to try it by myself first and then once I realized that it's cool then I'll invite a friend and we said oh we're from the video game business we know what that means. That means single player mode. So we built the version of the product with single player mode. This is what I'm talking about. The solution team trying to come up with solutions in response to customer feedback kind of still in line with the overall plan and we would have teenage they come in and they say oh avatar is cool and they say okay try it by themselves and they could kind of use their avatar and dress it up and that kind of thing. And we say okay time to invite one of your friends and they would say no thanks and say why not? This thing isn't cool but we told you it wasn't going to be cool right like it's a social product you have to network effects and the switching all this stuff and they look at like what old man what are you talking about? Like Mac does not compute and so we are like well but you don't want your own separate buddy list and instant messaging network and they're like why not? Well because the switching costs and this and that you know you don't want to have that like well I already run eight instant messaging clients so I don't mind another we're like there are eight instant messaging clients. So we were so far we made these assumptions about what customers would and wouldn't do that was just I mean in retrospect ridiculous and so when we finally were willing to accept that and once we got over my anger at having built all this code I had to throw out we then made it into a standalone product and a standalone network and it started to take off really from that day. Okay let's take one more question up here. Question about your good team and should be your partner so it looks like right things of the right team. How do you pick your partners and what's the right synergy of the team boy. I don't know that there's a general purpose answered to that question I mean the successful startups that I have seen run the gamut from people who have been friends forever and really have a tight bond people who basically hate their hate each other's guts but they want to use this product to resolve the dispute you know longstanding dispute so it really it's about you know it's really a chemistry question like what makes any team great you know I would you know refer to something like the wisdom of crowds for like the basic rules of how do you create a successful group environment which is you have a mechanism for having diverse opinions be aggregated together so that's you know you want the right level of tension and compatibility where people don't all have don't don't drink the exact same cool aid but they do have a shared passion for the ultimate vision that the product is going to go and then what I would say is great entrepreneur is don't have better ideas they have better process that's really what fundamentally what I'm trying to evangelize and so I believe that teams that come together from the very beginning with the idea of having enough humility and openness to say we know we're going to iterate we know we're going to pivot I think are more likely to be successful that's my belief. Eric so thank you very much. Oh thank you very much. You have been listening to the Draper Fisher-Jurvis and entrepreneurial thought leader series brought to you weekly by the Stanford Technology Ventures program you can find additional podcasts and videos of these lectures online at eCorner.stanford.edu